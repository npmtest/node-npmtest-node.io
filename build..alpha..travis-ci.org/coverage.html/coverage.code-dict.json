{"/home/travis/build/npmtest/node-npmtest-node.io/test.js":"/* istanbul instrument in package npmtest_node_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node.io/lib.npmtest_node.io.js":"/* istanbul instrument in package npmtest_node_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_io = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_io = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node.io/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node.io && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_io\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_io.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_io.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_io.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_io.__dirname + '/lib.npmtest_node_io.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/lib/node.io/index.js":"/*!\n * node.io\n * Copyright(c) 2010 Chris O'Hara <cohara87@gmail.com>\n * MIT Licensed\n */\n\nvar processor = require('./processor'),\n    request = require('./request'),\n    job = require('./job');\n\nexports = module.exports = {\n    Processor: processor.Processor,\n    JobProto: job.JobProto, //A reference to the underlying Job.prototype\n    JobClass: job.JobClass, //A reference to a new prototype identical to Job.prototype (so Job.prototype isn't modified)\n    Job: job.Job,           //Used to instantiate a JobClass\n    Proxy: request.Proxy,\n    HttpProxy: request.HttpProxy,\n    start: processor.start,\n    startSlave: processor.startSlave,\n    cli: require('./interfaces/cli').cli,\n    web: require('./interfaces/web').web,\n    utils: require('./utils')\n};\n\n//Shortcut for creating scraping jobs\nexports.create = function (obj) {\n    if (typeof obj === 'function') {\n        obj = {run: obj};\n    }\n    var options = obj.options || {};\n    options = utils.put({\n        timeout: 10,\n        auto_retry: true,\n        spoof: true\n    }, options);\n    return new job.Job(options, obj);\n};\n\n//High level method for noobs\nexports.scrape = function (input, run, output) {\n    if (typeof input === 'function') {\n        output = run;\n        run = input;\n        input = false;\n    }\n    var methods = {input:input, run:run},\n        options = {timeout:10, auto_retry:true};\n    if (typeof output !== 'undefined') {\n        methods.output = output;\n    }\n    processor.start(new exports.Job(options, methods));\n};\n\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/lib/node.io/processor.js":"/*!\n * node.io\n * Copyright(c) 2010 Chris O'Hara <cohara87@gmail.com>\n * MIT Licensed\n */\n\nvar fs = require('fs'),\n    path = require('path'),\n    events = require('events');\n    utils = require('./utils'),\n    sigmund = require('sigmund'),\n    Job = require('./job').JobProto;\n\n//Keep track of processes\nvar isMaster, isSlave, fork, distribute,\n    master, workers = [], worker_count = 0;\n\n/**\n * Create a new Processor with the specified options.\n *\n * @param {Object} options (optional)\n * @param {Bool} start_as_slave (optional)\n * @api public\n */\nvar Processor = function (options, start_as_slave) {\n    isSlave = start_as_slave && !process.env._CHILD_ID_;\n    isMaster = !start_as_slave && !process.env._CHILD_ID_;\n\n    this.options = options || {};\n    this.jobs = {};\n};\nexports.Processor = Processor;\n\n/**\n * Load events and message handlers.\n */\nrequire('./process_master');\nrequire('./process_worker');\nrequire('./process_slave');\n\n/**\n * exports.start\n *\n * Starts a job with the specified options and callback. `job` can be a\n * string (path) or an instance of nodeio.Job. `callback` takes (err) or\n * (err, output) if `capture_output` is true.\n *\n * @param {Object|String} job\n * @param {Object} options (optional)\n * @param {Function} callback (optional)\n * @param {Bool} capture_output (optional)\n * @api public\n */\nexports.start = function (job, options, callback, capture_output) {\n    if (typeof options === 'function') {\n        capture_output = callback;\n        callback = options;\n        options = {};\n    }\n    options = options || {};\n\n    var processor = new Processor(options);\n\n    //Default behaviour is to exit once the job is complete\n    callback = callback || function (err) {\n        if (err) {\n            utils.status.error(err);\n        }\n        process.exit();\n    };\n\n    //Callback for once we've loaded the job\n    var onload = function (job_name, job_obj) {\n\n        //If we're capturing output, we need to explicitly override job.output()\n        if (isMaster && capture_output) {\n            var output = [];\n            job_obj.output = function (out) {\n                if (out instanceof Array && job_obj.options.flatten) {\n                    for (var i = 0, l = out.length; i < l; i++) {\n                        output.push(out[i]);\n                    }\n                } else {\n                    output.push(out);\n                }\n            };\n            var old_callback = callback;\n            callback = function (err) {\n                old_callback(err, output);\n            };\n        }\n\n        //Are we distributing work?\n        fork = job_obj.options.fork;\n\n        //Initialise the processor\n        processor.init(function () {\n\n            //Start the job\n            if (isMaster) {\n                processor.startJob(job_name, job_obj, callback);\n            }\n\n        });\n    };\n\n    //Load the job\n    processor.loadJob(job, options, function (err, job_name, job_obj) {\n        if (err) {\n            callback(err);\n        } else {\n            onload(job_name, job_obj);\n        }\n    });\n};\n\n/**\n * exports.startSlave\n *\n * Starts the process as a slave. The process will wait for instructions\n * from the master.\n *\n * @param {Object} options (optional)\n * @api public\n */\nexports.startSlave = function (options) {\n    var processor = new Processor(options, true);\n    processor.init(function () {\n        processor.slaveInit();\n    });\n};\n\n/**\n * Initialises child processes if using the `-f` switch or `fork` op.\n *\n * @param {Function} callback\n * @api public\n */\nProcessor.prototype.init = function (callback) {\n    var self = this;\n\n    if (isMaster) {\n\n        if (fork) {\n\n            //It's too hard supporting two stables with different API's. It's easy\n            //to use the new childprocess.fork once 0.6 is standard.\n            this.status('Fork will be unsupported until v0.4 is deprecated', 'error');\n            fork = false;\n\n        }\n\n        //If we're only running in the one process, we're ready to start\n        return callback();\n\n    } else {\n\n        //If the number of workers is unspecified, spawn one worker per core\n        if ((isMaster || isSlave) && fork === true) {\n            fork = require('os').cpus().length;\n        }\n\n        //Use existing workers if already spawned\n        fork -= worker_count;\n        if (fork <= 0) {\n            return callback();\n        }\n\n        var nodes = multi.spawnWorkers(fork);\n\n        //The master receives this event when a child is spawned\n        nodes.addListener('child', function (stream) {\n\n            //Add message handlers\n            stream = multi.frameStream(stream, true);\n            stream.addListener('message', function (data) {\n                self.handleWorkerMessage(data);\n            });\n\n            workers.push(stream);\n            worker_count++;\n\n            //If we've spawned enough children, continue\n            if (worker_count == fork) {\n                fork = !!fork;\n                callback();\n            }\n        });\n\n        //Each child receives this event after they're spawned\n        nodes.addListener('master', function (stream) {\n\n            //Add message handlers\n            stream = multi.frameStream(stream, true);\n            stream.addListener('message', function (data) {\n                self.handleMasterMessage(data);\n            });\n\n            //Keep a reference to the master process\n            master = stream;\n        });\n    }\n};\n\nProcessor.prototype.processJob = function (job_name, job_obj, options, callback) {\n    //Unpack the job if a password was specified with the -u switch\n    if (options.unpack && typeof job_obj.unpack === 'function') {\n        this.status('Unpacking the job', 'debug');\n        try {\n            job_obj = job_obj.unpack(options.unpack);\n        } catch (e) {\n            callback('Failed to unpack job');\n            return;\n        }\n    }\n\n    if (typeof job_obj.job === 'object') {\n        job_obj = job_obj.job;\n    }\n\n    //Check if the file contains multiple jobs, e.g. exports.job = {job1:nodeio.Job, job2:nodeio.Job2}\n    if (typeof job_obj === 'object' && typeof job_obj.run !== 'function') {\n        var which_job;\n        if (options.args && options.args.length > 0) {\n            which_job = options.args.shift();\n            if (typeof job_obj[which_job] === 'undefined') {\n                callback('Module does not contain job \"' + which_job + '\"');\n                return;\n            }\n        } else {\n            //If no argument was specified, use the first job defined in the file\n            for (var i in job_obj) {\n                which_job = i;\n                break;\n            }\n        }\n        job_obj = job_obj[which_job];\n    }\n\n    //this.status('Running job \"' + (which_job || job_name) + '\"', 'debug');\n\n    //Some options/switches require the job to be extended (e.g. custom input)\n    if (options.extend && (options.extend.options || options.extend.methods)) {\n        job_obj = job_obj.extend(options.extend.options || {}, options.extend.methods || {});\n    }\n\n    //Allow processor options to override ops defined in the job\n    utils.put(job_obj.options, options);\n\n    return callback(null, job_name, job_obj);\n}\n\n/**\n * Loads a job asynchronously. Job can be a string (absolute path, or\n * file in the current working directory), or an instance of nodeio.Job.\n *\n * Note: CoffeeScript jobs are automatically compiled.\n *\n * @param {Object|String} job\n * @param {Function} callback\n * @api public\n */\nProcessor.prototype.loadJob = function (job, options, callback) {\n    var self = this;\n\n    if (typeof job === 'object') {\n\n        //The job is already loaded. Since we don't have a unique job\n        //name, give the job a unique ID before starting\n        var job_id = sigmund(job);\n        this.processJob(job_id, job, options, callback);\n\n    } else if (typeof job === 'string') {\n\n        //Check if the job is a builtin\n        var builtins = ['digest','eval','pagerank','query','resolve','statuscode','validate','word_count'];\n        if (builtins.indexOf(job) !== -1) {\n            this.processJob(job, require(__dirname + '/../../builtin/' + job + '.js'), options, callback);\n            return;\n        }\n\n        var ext = path.extname(job), is_coffee = false;\n\n        if (ext) {\n\n            is_coffee = ext === '.coffee' ? true : false\n\n        } else {\n\n            //No extension provided. Check to see if it's a .coffee file, otherwise let NodeJS determine the ext\n            try {\n                fs.lstatSync(job + '.coffee');\n                job += '.coffee';\n                is_coffee = true;\n            } catch (e) {}\n        }\n\n        if (!is_coffee) {\n\n            //Now that require.paths has gone away we have to jump through hoops.\n\n            var tryPaths = [process.cwd() + '/', ''];\n\n            for (var jobPath, i = 0; i < tryPaths.length; i++) {\n                jobPath = tryPaths[i] + job;\n                try {\n                    this.status('Attempting to load require(\\'' + jobPath + '\\')', 'debug');\n                    this.processJob(job, require(jobPath), options, callback);\n                    return;\n                } catch (e) {\n                    if (new RegExp(\"Cannot find module '\"+jobPath+\"'\").test(e.message)) {\n                        this.status('Failed to load require(\\'' + jobPath + '\\') - not found', 'debug');\n                    } else {\n                        this.status('Error: Failed to load job \"' + job + '\". Please check that the job exists and compiles correctly.', 'error');\n                        throw e;\n                        return callback('load error');\n                    }\n                }\n            }\n\n            callback('The job could not be found.');\n\n        } else {\n\n            //Make it a full path\n            if (job.indexOf('/') === -1) {\n                job = process.cwd() + '/' + job;\n            }\n\n            //Compile the job if it's CoffeeScript\n            var basename = path.basename(job, '.coffee');\n            var compiled_js = process.cwd() + '/' + basename + '_compiled.js';\n\n            if (isMaster) {\n\n                //If we're the master, compile and load the .coffee file\n                this.status('Compiling ' + job + ' => ' + compiled_js, 'debug');\n\n                utils.compile(options.compiler || 'coffee', job, compiled_js, function(err) {\n                    if (err) {\n                        callback(err);\n                    } else {\n                        //Load the compiled JS file\n                        self.processJob(compiled_js, require(compiled_js), options, callback);\n                    }\n                });\n\n            } else {\n\n                //If we're a child, the file has already been compiled by the master\n                this.processJob(compiled_js, require(compiled_js), options, callback);\n            }\n        }\n\n    } else if (typeof job === 'undefined') {\n        callback('No job specified! See `node.io --help` for more information.');\n    } else {\n        callback('Unknown job type: ' + typeof job);\n    }\n};\n\n/**\n * Starts the specified job.\n *\n * @param {String} job_name\n * @param {nodeio.Job} job_obj\n * @param {Function} oncomplete\n * @api public\n */\nProcessor.prototype.startJob = function (job_name, job_obj, oncomplete) {\n    var self = this, oncomplete = oncomplete || function () {};\n\n    //Give each job a unique ID - the process may be running more than one\n    //job at the same time\n    var id = utils.crc32(job_name);\n\n    //Init job state\n    var job = this.jobs[id] = {\n        id: id,\n        job_name: job_name,\n        obj: job_obj,\n        oncomplete: oncomplete,\n        options: job_obj.options,\n        instances: 0,\n        instance_pool: [],\n        retry_hashes: {},\n        input: [],\n        output: [],\n        input_offset: 0,\n        output_count: 0,\n        worker_complete: [],\n        ready_to_request_input: true,\n        is_complete: false,\n        start_time: new Date()\n    };\n\n    //Setup job events\n    if (isMaster) {\n        job.master = new events.EventEmitter();\n        this.setupMasterEvents(job, workers);\n    }\n    if (!isMaster || !fork) {\n        //The master process is also a worker process when !fork\n        job.worker = new events.EventEmitter();\n        this.setupWorkerEvents(job, master);\n    }\n\n    //Bind the oncomplete function to job.exit()\n    job.obj.exit = oncomplete;\n\n    //Provide a way for the job to use utils.status() wihle abiding by the -s switch\n    job.obj.status = function (msg, type) {\n        self.status(msg, type);\n    };\n    job.obj.debug = function (msg) {\n        if (self.options.debug) {\n            self.status(msg, 'debug');\n        }\n    };\n\n    //Set a timeout for the whole operation if the `global_timeout` op is set\n    if (job.options.global_timeout) {\n        job.global_timeout = setTimeout(function () {\n            oncomplete('Operation timed out (> ' + job.options.global_timeout + 's)');\n        }, job.options.global_timeout * 1000);\n    }\n\n    //Run job.init() if it's defined\n    if (typeof job.obj.init === 'function') {\n        job.obj.init.call(job.obj);\n        job.obj.handleSpecialIO.call(job.obj);\n    }\n\n    //Start the job\n    if (isMaster) {\n        job.master.emit('start');\n    }\n}\n\n/**\n * Ends the specified job. Untested!\n *\n * @param {String|Object} job\n * @api public\n */\nProcessor.prototype.endJob = function (job) {\n    if (typeof job === 'object') {\n        job = utils.crc32(JSON.stringify(job));\n    }\n    for (var i = 0, l = this.jobs.length; i < l; i++) {\n        if (this.jobs[i].job_name == job) {\n            delete this.jobs[i];\n        }\n    }\n};\n\n/**\n * Outputs a styled message to the console (wraps utils.status). Status\n * messages are omitted when using the `-s` switch or `silent` op.\n *\n * @param {String} msg\n * @param {String} type (optional)\n * @api public\n */\nProcessor.prototype.status = function (msg, type) {\n    if (type === 'debug' && !this.options.debug) {\n        return;\n    } else if (!this.options.silent) {\n        utils.status[type || 'info'](msg);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/lib/node.io/utils.js":"/*!\r\n * node.io\r\n * Copyright(c) 2010 Chris O'Hara <cohara87@gmail.com>\r\n * MIT Licensed\r\n */\r\n\r\nvar cwd = process.cwd(),\r\n    fs = require('fs'),\r\n    exec = require('child_process').exec;\r\n\r\n/**\r\n * Outputs a styled message to the console.\r\n *\r\n * @param {String} msg\r\n * @param {String} type (optional)\r\n * @api public\r\n */\r\nvar status = function (msg, type) {\r\n    var cmd = type;\r\n    \r\n    switch (type) {\r\n    case 'info':\r\n        msg = '\\x1B[33mINFO\\x1B[0m: ' + msg;\r\n        break;\r\n\r\n    case 'debug':\r\n        cmd  = 'info';\r\n        msg = '\\x1B[36mDEBUG\\x1B[0m: ' + msg;\r\n        break;\r\n\r\n    case 'error':\r\n    case 'fatal':\r\n        cmd  = 'error';\r\n        msg = '\\x1B[31mERROR\\x1B[0m: ' + msg;\r\n        break;\r\n\r\n    case 'ok':\r\n        cmd  = 'info';\r\n        msg = '\\x1B[32mOK\\x1B[0m: ' + msg;\r\n        break;\r\n\r\n    case 'bold':\r\n        cmd  = 'info';\r\n        msg = '\\x1B[33mINFO\\x1B[0m: \\x1B[1m' + msg + '\\x1B[0m';\r\n        break;\r\n    }\r\n    \r\n    console[cmd](msg); //Write output according to status severity\r\n    if (type === 'fatal') {\r\n        process.exit(1);\r\n    }\r\n};\r\nexports.status = {};\r\n['info', 'error', 'fatal', 'ok', 'debug', 'bold'].forEach(function (type) {\r\n    exports.status[type] = function (msg) {\r\n        status(msg, type);\r\n    };\r\n});\r\n\r\n/**\r\n * Removes the specified file on exit.\r\n *\r\n * @param {String} file\r\n * @api public\r\n */\r\nexports.removeOnExit = function (file) {\r\n    var removeFile = function () {\r\n        try {\r\n            fs.unlinkSync(file);\r\n        } catch (e) {}\r\n        try {\r\n            process.exit();\r\n        } catch (e) {}\r\n    };\r\n    ['SIGINT', 'SIGTERM', 'SIGQUIT', 'SIGHUP', 'exit'].forEach(function (signal) {\r\n        process.on(signal, removeFile);\r\n    });\r\n};\r\n\r\n/**\r\n * Compiles a CoffeeScript file (.coffee) using coffee(1).\r\n *\r\n * @param {String} coffee_file\r\n * @param {String} compiled_file\r\n * @param {Function} callback\r\n * @api public\r\n */\r\nexports.compile = function (compiler, coffee_file, compiled_file, callback) {\r\n    exec(compiler + ' -p -c \"' + coffee_file + '\"', {cwd: cwd}, function (err, stdout, stderr) {\r\n        if (err || stderr) {\r\n            callback(err || stderr);\r\n        } else {\r\n            exports.removeOnExit(compiled_file);\r\n            fs.writeFile(compiled_file, stdout, callback);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Calculates the CRC32 checksum of a string.\r\n *\r\n * @param {String} str\r\n * @return {String} checksum\r\n * @api public\r\n */\r\nvar crc32tab = [\r\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba,\r\n    0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\r\n    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,\r\n    0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\r\n    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,\r\n    0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\r\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec,\r\n    0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\r\n    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,\r\n    0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\r\n    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940,\r\n    0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\r\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116,\r\n    0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\r\n    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\r\n    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\r\n    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a,\r\n    0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\r\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818,\r\n    0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\r\n    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,\r\n    0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\r\n    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c,\r\n    0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\r\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,\r\n    0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\r\n    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,\r\n    0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\r\n    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086,\r\n    0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\r\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4,\r\n    0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\r\n    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,\r\n    0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\r\n    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,\r\n    0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\r\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe,\r\n    0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\r\n    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,\r\n    0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\r\n    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252,\r\n    0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\r\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60,\r\n    0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\r\n    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\r\n    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\r\n    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04,\r\n    0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\r\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a,\r\n    0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\r\n    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,\r\n    0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\r\n    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e,\r\n    0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\r\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,\r\n    0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\r\n    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,\r\n    0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\r\n    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0,\r\n    0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\r\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6,\r\n    0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\r\n    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,\r\n    0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d\r\n];\r\nexports.crc32 = function (str, hex) {\r\n    var crc = ~0, i;\r\n    for (i = 0; i < str.length; i++) {\r\n        crc = (crc >>> 8) ^ crc32tab[(crc ^ str.charCodeAt(i)) & 0xff];\r\n    }\r\n    crc = crc ^ (-1);\r\n    return hex ? crc.toString(16) : crc;\r\n};\r\n\r\n/**\r\n * Takes an arbitrary number of arguments (objects) and copies\r\n * ALL properties from right to left.\r\n *\r\n * @param {Object(s)} ...\r\n * @return {Object}\r\n * @api public\r\n */\r\n var x = 0;\r\nexports.put = function (o /*, args */) {\r\n    //Create o={} if not an object\r\n    if (typeof o !== 'object') o = {};\r\n\r\n    var obj = Array.prototype.slice.call(arguments,1),\r\n        i = 0, l = obj.length;\r\n\r\n    //Iterate over each subsequent object and copy properties into o\r\n    for (; i < l; i++) {\r\n        for (var j in obj[i]) {\r\n            if (obj[i].hasOwnProperty(j)) {\r\n                o[j] = obj[i][j];\r\n            }\r\n        }\r\n    }\r\n\r\n    return o;\r\n}\r\n\r\n/**\r\n * Takes an arbitrary number of arguments (objects) and copies\r\n * properties from right to left only if they don't already exist.\r\n *\r\n * @param {Object(s)} ...\r\n * @return {Object}\r\n * @api public\r\n */\r\nexports.put_default = function (o /*, args */) {\r\n    //Create o={} if not an object\r\n    if (typeof o !== 'object') o = {};\r\n\r\n    var obj = Array.prototype.slice.call(arguments,1),\r\n        i = 0, l = obj.length;\r\n\r\n    //Iterate over each subsequent object and copy properties into o\r\n    //if they don't already exist\r\n    for (; i < l; i++) {\r\n        for (var j in obj[i]) {\r\n            if (typeof o[j] === 'undefined' && obj[i].hasOwnProperty(j)) {\r\n                o[j] = obj[i][j];\r\n            }\r\n        }\r\n    }\r\n\r\n    return o;\r\n}\r\n\r\n/**\r\n * Custom stringify function.\r\n *\r\n * @param {Object} data\r\n * @param {String} newline (optional)\r\n * @param {Boolean} stringify_array\r\n * @return {String}\r\n * @api public\r\n */\r\nexports.dataToString = function (data, newline, stringify_array) {\r\n    var str = '';\r\n    newline = newline || '\\n';\r\n    if (!stringify_array && data instanceof Array) {\r\n        for (var i = 0, l = data.length; i < l; i++) {\r\n            str += exports.dataToString(data[i], newline, true);\r\n        }\r\n    } else if (typeof data === 'object') {\r\n        str = JSON.stringify(data) + newline;\r\n    } else {\r\n        str = data + newline;\r\n    }\r\n    return str;\r\n};\r\n\r\n/**\r\n * A method for creating and controlling a node.io daemon.\r\n *\r\n * `arg` can be:\r\n *      start = daemonizes the process\r\n *      stop  = stops the daemon if it is running\r\n *      restart = alias for stop -> start\r\n *      pid = outputs the daemon's PID if it is running\r\n *      log = outputs the daemon's log file (stdout & stderr)\r\n *\r\n * @param {String} arg\r\n * @param {Function} callback\r\n * @api public\r\n */\r\nexports.daemonize = function (arg, callback) {\r\n    var lock_file = '/tmp/nodeio.pid',\r\n        log_file = '/tmp/nodeio.log';\r\n\r\n    try {\r\n        var daemon = require('daemon');\r\n    } catch(e) {\r\n        exports.status.fatal('Please run `npm install daemon`');\r\n    }\r\n\r\n    var start = function () {\r\n        daemon.daemonize(log_file, lock_file, function (err) {\r\n            if (err) return status('Error starting daemon: ' + err, 'error');\r\n            callback();\r\n        });\r\n    };\r\n\r\n    var stop = function () {\r\n        try {\r\n            fs.readFileSync(lock_file);\r\n        } catch (e) {\r\n            return status('Daemon is not running', 'error');\r\n        };\r\n        daemon.kill(lock_file, function (err, pid) {\r\n            if (err && err.errno === 3) {\r\n                return status('Daemon is not running', 'error');\r\n            } else if (err) {\r\n                return status('Error stopping daemon: ' + err.errno, 'error');\r\n            }\r\n            status('Successfully stopped daemon with pid: ' + pid, 'ok');\r\n        });\r\n    };\r\n\r\n    switch(arg) {\r\n    case 'stop':\r\n        stop();\r\n        break;\r\n    case 'restart':\r\n        daemon.kill(lock_file, function () {\r\n            start();\r\n        });\r\n        break;\r\n    case 'log':\r\n        try {\r\n            console.log(fs.readFileSync(log_file, 'utf8'));\r\n        } catch (e) {\r\n            return status('No daemon log file', 'error');\r\n        };\r\n        break;\r\n    case 'pid':\r\n        try {\r\n            var pid = fs.readFileSync(lock_file, 'utf8');\r\n            fs.statSync('/proc/' + pid);\r\n            status(pid, 'info');\r\n        } catch (e) {\r\n            return status('Daemon is not running', 'error');\r\n        };\r\n        break;\r\n    default:\r\n        start();\r\n        break;\r\n    }\r\n}\r\n\r\n/**\r\n * Recursively find all files in a directory (async).\r\n *\r\n * `callback` receives an array of files.\r\n *\r\n * @param {String} path\r\n * @param {Function} callback\r\n * @api public\r\n */\r\nexports.getFiles = function (root_path, callback) {\r\n    var files = [];\r\n    fs.readdir(root_path, function(err, dir_files) {\r\n        if (err) throw err;\r\n        var i = dir_files.length;\r\n        var check_complete = function () {\r\n            if (i === 0) {\r\n                callback(files);\r\n            }\r\n        };\r\n        check_complete();\r\n        dir_files.forEach(function (path) {\r\n            fs.stat(root_path + '/' + path, function (err, stat) {\r\n                if (err) throw err;\r\n                if (stat.isDirectory()) {\r\n                    exports.getFiles(root_path + '/' + path, function (subdir_files) {\r\n                        subdir_files.forEach(function (file) {\r\n                            files.push(path + '/' + file);\r\n                        });\r\n                        i--;\r\n                        check_complete();\r\n                    });\r\n                } else {\r\n                    files.push(path);\r\n                    i--;\r\n                    check_complete();\r\n                }\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nexports.tick = typeof setImmediate !== 'undefined' ? setImmediate : process.nextTick;\r\n\r\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/lib/node.io/job.js":"/*!\n * node.io\n * Copyright(c) 2010 Chris O'Hara <cohara87@gmail.com>\n * MIT Licensed\n */\n\nvar validator = require('../../vendor/validator'),\n    utils = require('./utils');\n\n/**\n * Default job options\n */\nvar default_options = {\n    max: 1,\n    take: 1,\n    retries: 2,\n    timeout: false,\n    flatten: true,\n    benchmark: false,\n    fork: false,\n    global_timeout: false,\n    input: false,\n    worker_input_mult: 1,\n    recurse: false,\n    read_buffer: 8096,\n    newline: '\\n',\n    encoding: 'utf8',\n    proxy: false,\n    redirects: 3,\n    retry_request: false,\n    args: [],\n    jsdom: false,\n    auto_retry: false,\n    ignore_code: false,\n    external_resources: false,\n    expand_single_selected: true\n};\n\n/**\n * Creates a new Job with the specified options\n *\n * @param {Number} options (optional)\n * @api public\n */\nvar Job = exports.JobProto = function (options) {\n    this.reset();\n\n    //Set job options\n    this.options = utils.put_default(options, default_options);\n\n    //Bind node-validator\n    var val = new validator.Validator();\n    this.assert = val.check.bind(val);\n};\n\nJob.prototype.reset = function () {\n    this.input_stream = {};\n    this.output_streams = {};\n\n    this.assigned_input = [];\n    this.timeout = null;\n    this.isComplete = false;\n\n    this.bytes_read = 0;\n    this.bytes_written = 0;\n    this.bytes_received = 0;\n\n    //Store info about the last and next request\n    this.last = {};\n    this.next = {};\n}\n\nvar __extends = function (child, parent) {\n    for (var key in parent) {\n        if (parent.hasOwnProperty(key)) child[key] = parent[key]\n    }\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor;\n    child.__super__ = parent.prototype;\n    return child;\n};\n\n//Each call creates a new class/prototype so that the underlying Job.prototype is untouched\nexports.__defineGetter__('JobClass', function () {\n    var JobClass = function (options , methods) {\n        //Job.apply(this, [options]);\n        JobClass.__super__.constructor.apply(this, arguments);\n\n        //Handle special input / output cases (see io.js)\n        this.handleSpecialIO();\n    };\n    __extends(JobClass, Job);\n    return JobClass;\n});\n\n//Instantiate a new JobClass\nexports.Job = function (options, methods) {\n    if (typeof methods === 'undefined') {\n        methods = utils.put({}, options);\n        options = {};\n    }\n    var JobClass = exports.JobClass;\n    utils.put(JobClass.prototype, methods);\n\n    //Allow JobClass to be extended\n    JobClass.prototype.extend = function (options, methods) {\n        if (typeof methods === 'undefined') {\n            methods = utils.put({}, options);\n            options = {};\n        }\n        function Child () {\n            Child.__super__.constructor.apply(this, arguments);\n        };\n        __extends(Child, JobClass);\n        utils.put(Child.prototype, methods);\n        utils.put_default(options, this.options);\n        var child_instance = new Child(options);\n        child_instance.__super__ = child_instance.constructor.__super__; //?\n        return child_instance;\n    };\n\n    return new JobClass(options);\n};\n\nJob.prototype.finish = function (callback) {\n    if (!this.isComplete) {\n        this.cancel_timeout();\n        this.isComplete = true;\n        if (callback) {\n            callback();\n        };\n    }\n}\n\nJob.prototype.cancel_timeout = function () {\n    if (this.timeout) {\n        clearTimeout(this.timeout);\n    }\n};\n\nJob.prototype.fail_with = function (err) {\n    var self = this;\n    this.finish(function () {\n        var ret = self.fail(this.assigned_input, err);\n        if (typeof ret !== 'undefined' && ret !== null) {\n            self.emit(ret);\n        }\n    });\n}\n\n//By default, run() passes through input\nJob.prototype.run = function () {\n    this.emit.apply(this, arguments);\n};\n\n//processor.js overrides these methods to add some magic\n//-----------------------------------------------------------------------------\nJob.prototype.emit = function() {\n    if (this.is_complete) return;\n    this.output.apply(this, arguments); \n}\nJob.prototype.info = function () {};\nJob.prototype.debug = function () {};\nJob.prototype.skip = function () {\n    this.is_complete = true;\n};\n//Job.prototype.fail = function () {};\nJob.prototype.exit = function () {\n    this.is_complete = true;\n};\nJob.prototype.add = function () {};\n//-----------------------------------------------------------------------------\n\n//Add filter / sanitisation methods to the prototype\nvar filter = new validator.Filter();\nJob.prototype.sanitize = Job.prototype.filter = filter.sanitize.bind(filter);\n\n//Add some other helpful methods\nrequire('./io');\nrequire('./request');\nrequire('./dom');\nrequire('./spawn');\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/vendor/validator/lib/index.js":"exports.Validator = require('./validator').Validator;\nexports.Filter = require('./filter').Filter;\n\nexports.entities = require('./entities');\n\n//Quick access methods\nexports.sanitize = exports.convert = function(str) {\n    var filter = new exports.Filter();\n    return filter.sanitize(str);\n}\n\nexports.check = exports.validate = exports.assert = function(str, fail_msg) {\n    var validator = new exports.Validator();\n    return validator.check(str, fail_msg);\n}","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/vendor/validator/lib/validator.js":"var net = require('net');\n\nvar Validator = exports.Validator = function() {}\n\nValidator.prototype.check = function(str, fail_msg) {\n    this.str = (str == null || (isNaN(str) && str.length == undefined)) ? '' : str;\n    // Convert numbers to strings but keep arrays/objects\n    if (typeof this.str == 'number') {\n      this.str += '';\n    }\n    this.msg = fail_msg;\n    this._errors = [];\n    return this;\n}\n\n// Helper function to avoid duplication of code\nfunction toDateTime(date) {\n    if (date instanceof Date) {\n      return date;\n    }\n    var intDate = Date.parse(date);\n    if (isNaN(intDate)) {\n        return null;\n    } \n    return new Date(intDate);\n}\n\n// Convert to date without the time component\nfunction toDate(date) {\n    if (!(date instanceof Date)) {\n      date = toDateTime(date);\n    }\n    if (!date) {\n      return null;\n    }\n    date.setHours(0);\n    date.setMinutes(0);\n    date.setSeconds(0);\n    date.setMilliseconds(0);\n    return date;\n}\n\n//Create some aliases - may help code readability\nValidator.prototype.validate = Validator.prototype.check;\nValidator.prototype.assert = Validator.prototype.check;\n\nValidator.prototype.error = function(msg) {\n    throw new Error(msg);\n    return this;\n}\n\nValidator.prototype.isEmail = function() {\n    if (!this.str.match(/^(?:[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+\\.)*[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/)) {\n       return this.error(this.msg || 'Invalid email');\n    }\n    return this;\n}\n\nValidator.prototype.isUrl = function() {\n    if (!this.str.match(/^(?:(?:ht|f)tp(?:s?)\\:\\/\\/|~\\/|\\/)?(?:\\w+:\\w+@)?((?:(?:[-\\w\\d{1-3}]+\\.)+(?:com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|edu|co\\.uk|ac\\.uk|it|fr|tv|museum|asia|local|travel|[a-z]{2}))|((\\b25[0-5]\\b|\\b[2][0-4][0-9]\\b|\\b[0-1]?[0-9]?[0-9]\\b)(\\.(\\b25[0-5]\\b|\\b[2][0-4][0-9]\\b|\\b[0-1]?[0-9]?[0-9]\\b)){3}))(?::[\\d]{1,5})?(?:(?:(?:\\/(?:[-\\w~!$+|.,=]|%[a-f\\d]{2})+)+|\\/)+|\\?|#)?(?:(?:\\?(?:[-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?(?:[-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)(?:&(?:[-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?(?:[-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)*)*(?:#(?:[-\\w~!$ |\\/.,*:;=]|%[a-f\\d]{2})*)?$/)) {\n       return this.error(this.msg || 'Invalid URL');\n    }\n    return this;\n}\n\nValidator.prototype.isIP = function() {\n    //net.isIP is in node >= 0.3.0\n    if (typeof net.isIP === 'function') {\n        if (net.isIP(this.str) === 0) {\n           return this.error(this.msg || 'Invalid IP');\n        }\n    } else {\n        if (!this.str.match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)) {\n           return this.error(this.msg || 'Invalid IP');\n        }\n    }\n    return this;\n}\n\nValidator.prototype.isAlpha = function() {\n    if (!this.str.match(/^[a-zA-Z]+$/)) {\n       return this.error(this.msg || 'Invalid characters');\n    }\n    return this;\n}\n\nValidator.prototype.isAlphanumeric = function() {\n    if (!this.str.match(/^[a-zA-Z0-9]+$/)) {\n       return this.error(this.msg || 'Invalid characters');\n    }\n    return this;\n}\n\nValidator.prototype.isNumeric = function() {\n    if (!this.str.match(/^-?[0-9]+$/)) {\n       return this.error(this.msg || 'Invalid number');\n    }\n    return this;\n}\n\nValidator.prototype.isLowercase = function() {\n    if (!this.str.match(/^[a-z0-9]+$/)) {\n       return this.error(this.msg || 'Invalid characters');\n    }\n    return this;\n}\n\nValidator.prototype.isUppercase = function() {\n    if (!this.str.match(/^[A-Z0-9]+$/)) {\n       return this.error(this.msg || 'Invalid characters');\n    }\n    return this;\n}\n\nValidator.prototype.isInt = function() {\n    if (!this.str.match(/^(?:-?(?:[0-9][0-9]*)(?:\\.?0+)?)$/)) {\n       return this.error(this.msg || 'Invalid integer');\n    }\n    return this;\n}\n\nValidator.prototype.isDecimal = function() {\n    if (this.str === '' || !this.str.match(/^(?:-?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$/)) {\n       return this.error(this.msg || 'Invalid decimal');\n    }\n    return this;\n}\n\nValidator.prototype.isFloat = function() {\n    return this.isDecimal();\n}\n\nValidator.prototype.notNull = function() {\n    if (this.str === '') {\n       return this.error(this.msg || 'Invalid characters');\n    }\n    return this;\n}\n\nValidator.prototype.isNull = function() {\n    if (this.str !== '') {\n       return this.error(this.msg || 'Invalid characters');\n    }\n    return this;\n}\n\nValidator.prototype.notEmpty = function() {\n    if (this.str.match(/^[\\s\\t\\r\\n]*$/)) {\n       return this.error(this.msg || 'String is empty');\n    }\n    return this;\n}\n\nValidator.prototype.equals = function(equals) {\n    if (this.str != equals) {\n       return this.error(this.msg || 'Not equal');\n    }\n    return this;\n}\n\nValidator.prototype.contains = function(str) {\n    if (this.str.indexOf(str) === -1) {\n       return this.error(this.msg || 'Invalid characters');\n    }\n    return this;\n}\n\nValidator.prototype.notContains = function(str) {\n    if (this.str.indexOf(str) >= 0) {\n       return this.error(this.msg || 'Invalid characters');\n    }\n    return this;\n}\n\nValidator.prototype.regex = Validator.prototype.is = function(pattern, modifiers) {\n    if (typeof pattern !== 'function') {\n        pattern = new RegExp(pattern, modifiers);\n    }\n    if (! this.str.match(pattern)) {\n       return this.error(this.msg || 'Invalid characters');\n    }\n    return this;\n}\n\nValidator.prototype.notRegex = Validator.prototype.not = function(pattern, modifiers) {\n    if (typeof pattern !== 'function') {\n        pattern = new RegExp(pattern, modifiers);\n    }\n    if (this.str.match(pattern)) {\n       return this.error(this.msg || 'Invalid characters');\n    }\n    return this;\n}\n\nValidator.prototype.len = function(min, max) {\n    if (this.str.length < min) {\n       return this.error(this.msg || 'String is too small');\n    }\n    if (typeof max !== undefined && this.str.length > max) {\n       return this.error(this.msg || 'String is too large');\n    }\n    return this;\n}\n\n//Thanks to github.com/sreuter for the idea.\nValidator.prototype.isUUID = function(version) {\n    if (version == 3 || version == 'v3') {\n        pattern = /[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i;\n    } else if (version == 4 || version == 'v4') {\n        pattern = /[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i;\n    } else {\n        pattern = /[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i;\n    }\n    if (!this.str.match(pattern)) {\n       return this.error(this.msg || 'Not a UUID');\n    }\n    return this;\n}\n\nValidator.prototype.isDate = function() {\n    var intDate = Date.parse(this.str);\n    if (isNaN(intDate)) { \n        return this.error(this.msg || 'Not a date'); \n    }\n    return this;\n}\n\nValidator.prototype.isAfter = function(date) {\n    date = date || new Date();\n    var origDate = toDate(this.str);\n    var compDate = toDate(date);\n\n    if (origDate && compDate && origDate < compDate) {\n        return this.error(this.msg || 'Invalid date');\n    }\n    \n    return this;\n}\n\nValidator.prototype.isBefore = function(date) {\n    date = date || new Date();\n    var origDate = toDate(this.str);\n    var compDate = toDate(date);\n\n    if (origDate && compDate && origDate > compDate) {\n        return this.error(this.msg || 'Invalid date');\n    }\n\n    return this;\n}\n\nValidator.prototype.isIn = function(options) {\n    if (options && typeof options.indexOf === 'function') {\n        if (!~options.indexOf(this.str)) {\n            return this.error(this.msg || 'Unexpected value');\n        }\n        return this;\n    } else {\n        return this.error(this.msg || 'Invalid in() argument');\n    }\n}\n\nValidator.prototype.notIn = function(options) {\n    if (options && typeof options.indexOf === 'function') {\n        if (options.indexOf(this.str) !== -1) {\n            return this.error(this.msg || 'Unexpected value');\n        }\n        return this;\n    } else {\n        return this.error(this.msg || 'Invalid notIn() argument');\n    }\n}\n\nValidator.prototype.min = function(val) {\n    var number = parseFloat(this.str);\n    if (!isNaN(number) && number < val) {\n        return this.error(this.msg || 'Invalid number');\n    }\n    return this;\n}\n\nValidator.prototype.max = function(val) {\n    var number = parseFloat(this.str);\n    if (!isNaN(number) && number > val) {\n        return this.error(this.msg || 'Invalid number');\n    }\n    return this;\n}\n\nValidator.prototype.isArray = function() {\n    if (!Array.isArray(this.str)) {\n        return this.error(this.msg || 'Not an array');\n    }\n    return this;\n}\n\n//Will work against Visa, MasterCard, American Express, Discover, Diners Club, and JCB card numbering formats\nValidator.prototype.isCreditCard = function() {\n    this.str.replace(/[^0-9]+/g, ''); //remove all dashes, spaces, etc.\n    if (!this.str.match(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/)) {\n        return this.error(this.msg || 'Invalid credit card');\n    }\n    return this;\n}\n\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/vendor/validator/lib/filter.js":"var entities = require('./entities');\nvar xss = require('./xss');\n\nvar Filter = exports.Filter = function() {}\n\nvar whitespace = '\\\\r\\\\n\\\\t\\\\s';\n\nFilter.prototype.modify = function(str) {\n    this.str = str;\n}\n\nFilter.prototype.wrap = function (str) {\n    return str;\n}\n\nFilter.prototype.value = function () {\n    return this.str;\n}\n\nFilter.prototype.chain = function () {\n    this.wrap = function () { return this };\n    return this;\n}\n\n//Create some aliases - may help code readability\nFilter.prototype.convert = Filter.prototype.sanitize = function(str) {\n    this.str = str;\n    return this;\n}\n\nFilter.prototype.xss = function(is_image) {\n    this.modify(xss.clean(this.str, is_image));\n    return this.wrap(this.str);\n}\n\nFilter.prototype.entityDecode = function() {\n    this.modify(entities.decode(this.str));\n    return this.wrap(this.str);\n}\n\nFilter.prototype.entityEncode = function() {\n    this.modify(entities.encode(this.str));\n    return this.wrap(this.str);\n}\n\nFilter.prototype.ltrim = function(chars) {\n    chars = chars || whitespace;\n    this.modify(this.str.replace(new RegExp('^['+chars+']+', 'g'), ''));\n    return this.wrap(this.str);\n}\n\nFilter.prototype.rtrim = function(chars) {\n    chars = chars || whitespace;\n    this.modify(this.str.replace(new RegExp('['+chars+']+$', 'g'), ''));\n    return this.wrap(this.str);\n}\n\nFilter.prototype.trim = function(chars) {\n    chars = chars || whitespace;\n    this.modify(this.str.replace(new RegExp('^['+chars+']+|['+chars+']+$', 'g'), ''));\n    return this.wrap(this.str);\n}\n\nFilter.prototype.ifNull = function(replace) {\n    if (!this.str || this.str === '') {\n        this.modify(replace);\n    }\n    return this.wrap(this.str);\n}\n\nFilter.prototype.toFloat = function() {\n    this.modify(parseFloat(this.str));\n    return this.wrap(this.str);\n}\n\nFilter.prototype.toInt = function(radix) {\n    radix = radix || 10;\n    this.modify(parseInt(this.str, radix));\n    return this.wrap(this.str);\n}\n\n//Any strings with length > 0 (except for '0' and 'false') are considered true,\n//all other strings are false\nFilter.prototype.toBoolean = function() {\n    if (!this.str || this.str == '0' || this.str == 'false' || this.str == '') {\n        this.modify(false);\n    } else {\n        this.modify(true);\n    }\n    return this.wrap(this.str);\n}\n\n//String must be equal to '1' or 'true' to be considered true, all other strings\n//are false\nFilter.prototype.toBooleanStrict = function() {\n    if (this.str == '1' || this.str == 'true') {\n        this.modify(true);\n    } else {\n        this.modify(false);\n    }\n    return this.wrap(this.str);\n}\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/vendor/validator/lib/entities.js":"var entities = {\n    '&nbsp;': '\\u00a0',\n    '&iexcl;': '\\u00a1',\n    '&cent;': '\\u00a2',\n    '&pound;': '\\u00a3',\n    '&curren;': '\\u20ac',\n    '&yen;': '\\u00a5',\n    '&brvbar;': '\\u0160',\n    '&sect;': '\\u00a7',\n    '&uml;': '\\u0161',\n    '&copy;': '\\u00a9',\n    '&ordf;': '\\u00aa',\n    '&laquo;': '\\u00ab',\n    '&not;': '\\u00ac',\n    '&shy;': '\\u00ad',\n    '&reg;': '\\u00ae',\n    '&macr;': '\\u00af',\n    '&deg;': '\\u00b0',\n    '&plusmn;': '\\u00b1',\n    '&sup2;': '\\u00b2',\n    '&sup3;': '\\u00b3',\n    '&acute;': '\\u017d',\n    '&micro;': '\\u00b5',\n    '&para;': '\\u00b6',\n    '&middot;': '\\u00b7',\n    '&cedil;': '\\u017e',\n    '&sup1;': '\\u00b9',\n    '&ordm;': '\\u00ba',\n    '&raquo;': '\\u00bb',\n    '&frac14;': '\\u0152',\n    '&frac12;': '\\u0153',\n    '&frac34;': '\\u0178',\n    '&iquest;': '\\u00bf',\n    '&Agrave;': '\\u00c0',\n    '&Aacute;': '\\u00c1',\n    '&Acirc;': '\\u00c2',\n    '&Atilde;': '\\u00c3',\n    '&Auml;': '\\u00c4',\n    '&Aring;': '\\u00c5',\n    '&AElig;': '\\u00c6',\n    '&Ccedil;': '\\u00c7',\n    '&Egrave;': '\\u00c8',\n    '&Eacute;': '\\u00c9',\n    '&Ecirc;': '\\u00ca',\n    '&Euml;': '\\u00cb',\n    '&Igrave;': '\\u00cc',\n    '&Iacute;': '\\u00cd',\n    '&Icirc;': '\\u00ce',\n    '&Iuml;': '\\u00cf',\n    '&ETH;': '\\u00d0',\n    '&Ntilde;': '\\u00d1',\n    '&Ograve;': '\\u00d2',\n    '&Oacute;': '\\u00d3',\n    '&Ocirc;': '\\u00d4',\n    '&Otilde;': '\\u00d5',\n    '&Ouml;': '\\u00d6',\n    '&times;': '\\u00d7',\n    '&Oslash;': '\\u00d8',\n    '&Ugrave;': '\\u00d9',\n    '&Uacute;': '\\u00da',\n    '&Ucirc;': '\\u00db',\n    '&Uuml;': '\\u00dc',\n    '&Yacute;': '\\u00dd',\n    '&THORN;': '\\u00de',\n    '&szlig;': '\\u00df',\n    '&agrave;': '\\u00e0',\n    '&aacute;': '\\u00e1',\n    '&acirc;': '\\u00e2',\n    '&atilde;': '\\u00e3',\n    '&auml;': '\\u00e4',\n    '&aring;': '\\u00e5',\n    '&aelig;': '\\u00e6',\n    '&ccedil;': '\\u00e7',\n    '&egrave;': '\\u00e8',\n    '&eacute;': '\\u00e9',\n    '&ecirc;': '\\u00ea',\n    '&euml;': '\\u00eb',\n    '&igrave;': '\\u00ec',\n    '&iacute;': '\\u00ed',\n    '&icirc;': '\\u00ee',\n    '&iuml;': '\\u00ef',\n    '&eth;': '\\u00f0',\n    '&ntilde;': '\\u00f1',\n    '&ograve;': '\\u00f2',\n    '&oacute;': '\\u00f3',\n    '&ocirc;': '\\u00f4',\n    '&otilde;': '\\u00f5',\n    '&ouml;': '\\u00f6',\n    '&divide;': '\\u00f7',\n    '&oslash;': '\\u00f8',\n    '&ugrave;': '\\u00f9',\n    '&uacute;': '\\u00fa',\n    '&ucirc;': '\\u00fb',\n    '&uuml;': '\\u00fc',\n    '&yacute;': '\\u00fd',\n    '&thorn;': '\\u00fe',\n    '&yuml;': '\\u00ff',\n    '&quot;': '\\u0022',\n    '&lt;': '\\u003c',\n    '&gt;': '\\u003e',\n    '&apos;': '\\u0027',\n    '&minus;': '\\u2212',\n    '&circ;': '\\u02c6',\n    '&tilde;': '\\u02dc',\n    '&Scaron;': '\\u0160',\n    '&lsaquo;': '\\u2039',\n    '&OElig;': '\\u0152',\n    '&lsquo;': '\\u2018',\n    '&rsquo;': '\\u2019',\n    '&ldquo;': '\\u201c',\n    '&rdquo;': '\\u201d',\n    '&bull;': '\\u2022',\n    '&ndash;': '\\u2013',\n    '&mdash;': '\\u2014',\n    '&trade;': '\\u2122',\n    '&scaron;': '\\u0161',\n    '&rsaquo;': '\\u203a',\n    '&oelig;': '\\u0153',\n    '&Yuml;': '\\u0178',\n    '&fnof;': '\\u0192',\n    '&Alpha;': '\\u0391',\n    '&Beta;': '\\u0392',\n    '&Gamma;': '\\u0393',\n    '&Delta;': '\\u0394',\n    '&Epsilon;': '\\u0395',\n    '&Zeta;': '\\u0396',\n    '&Eta;': '\\u0397',\n    '&Theta;': '\\u0398',\n    '&Iota;': '\\u0399',\n    '&Kappa;': '\\u039a',\n    '&Lambda;': '\\u039b',\n    '&Mu;': '\\u039c',\n    '&Nu;': '\\u039d',\n    '&Xi;': '\\u039e',\n    '&Omicron;': '\\u039f',\n    '&Pi;': '\\u03a0',\n    '&Rho;': '\\u03a1',\n    '&Sigma;': '\\u03a3',\n    '&Tau;': '\\u03a4',\n    '&Upsilon;': '\\u03a5',\n    '&Phi;': '\\u03a6',\n    '&Chi;': '\\u03a7',\n    '&Psi;': '\\u03a8',\n    '&Omega;': '\\u03a9',\n    '&alpha;': '\\u03b1',\n    '&beta;': '\\u03b2',\n    '&gamma;': '\\u03b3',\n    '&delta;': '\\u03b4',\n    '&epsilon;': '\\u03b5',\n    '&zeta;': '\\u03b6',\n    '&eta;': '\\u03b7',\n    '&theta;': '\\u03b8',\n    '&iota;': '\\u03b9',\n    '&kappa;': '\\u03ba',\n    '&lambda;': '\\u03bb',\n    '&mu;': '\\u03bc',\n    '&nu;': '\\u03bd',\n    '&xi;': '\\u03be',\n    '&omicron;': '\\u03bf',\n    '&pi;': '\\u03c0',\n    '&rho;': '\\u03c1',\n    '&sigmaf;': '\\u03c2',\n    '&sigma;': '\\u03c3',\n    '&tau;': '\\u03c4',\n    '&upsilon;': '\\u03c5',\n    '&phi;': '\\u03c6',\n    '&chi;': '\\u03c7',\n    '&psi;': '\\u03c8',\n    '&omega;': '\\u03c9',\n    '&thetasym;': '\\u03d1',\n    '&upsih;': '\\u03d2',\n    '&piv;': '\\u03d6',\n    '&ensp;': '\\u2002',\n    '&emsp;': '\\u2003',\n    '&thinsp;': '\\u2009',\n    '&zwnj;': '\\u200c',\n    '&zwj;': '\\u200d',\n    '&lrm;': '\\u200e',\n    '&rlm;': '\\u200f',\n    '&sbquo;': '\\u201a',\n    '&bdquo;': '\\u201e',\n    '&dagger;': '\\u2020',\n    '&Dagger;': '\\u2021',\n    '&hellip;': '\\u2026',\n    '&permil;': '\\u2030',\n    '&prime;': '\\u2032',\n    '&Prime;': '\\u2033',\n    '&oline;': '\\u203e',\n    '&frasl;': '\\u2044',\n    '&euro;': '\\u20ac',\n    '&image;': '\\u2111',\n    '&weierp;': '\\u2118',\n    '&real;': '\\u211c',\n    '&alefsym;': '\\u2135',\n    '&larr;': '\\u2190',\n    '&uarr;': '\\u2191',\n    '&rarr;': '\\u2192',\n    '&darr;': '\\u2193',\n    '&harr;': '\\u2194',\n    '&crarr;': '\\u21b5',\n    '&lArr;': '\\u21d0',\n    '&uArr;': '\\u21d1',\n    '&rArr;': '\\u21d2',\n    '&dArr;': '\\u21d3',\n    '&hArr;': '\\u21d4',\n    '&forall;': '\\u2200',\n    '&part;': '\\u2202',\n    '&exist;': '\\u2203',\n    '&empty;': '\\u2205',\n    '&nabla;': '\\u2207',\n    '&isin;': '\\u2208',\n    '&notin;': '\\u2209',\n    '&ni;': '\\u220b',\n    '&prod;': '\\u220f',\n    '&sum;': '\\u2211',\n    '&lowast;': '\\u2217',\n    '&radic;': '\\u221a',\n    '&prop;': '\\u221d',\n    '&infin;': '\\u221e',\n    '&ang;': '\\u2220',\n    '&and;': '\\u2227',\n    '&or;': '\\u2228',\n    '&cap;': '\\u2229',\n    '&cup;': '\\u222a',\n    '&int;': '\\u222b',\n    '&there4;': '\\u2234',\n    '&sim;': '\\u223c',\n    '&cong;': '\\u2245',\n    '&asymp;': '\\u2248',\n    '&ne;': '\\u2260',\n    '&equiv;': '\\u2261',\n    '&le;': '\\u2264',\n    '&ge;': '\\u2265',\n    '&sub;': '\\u2282',\n    '&sup;': '\\u2283',\n    '&nsub;': '\\u2284',\n    '&sube;': '\\u2286',\n    '&supe;': '\\u2287',\n    '&oplus;': '\\u2295',\n    '&otimes;': '\\u2297',\n    '&perp;': '\\u22a5',\n    '&sdot;': '\\u22c5',\n    '&lceil;': '\\u2308',\n    '&rceil;': '\\u2309',\n    '&lfloor;': '\\u230a',\n    '&rfloor;': '\\u230b',\n    '&lang;': '\\u2329',\n    '&rang;': '\\u232a',\n    '&loz;': '\\u25ca',\n    '&spades;': '\\u2660',\n    '&clubs;': '\\u2663',\n    '&hearts;': '\\u2665',\n    '&diams;': '\\u2666'\n};\n\nexports.decode = function (str) {\n    if (!~str.indexOf('&')) return str;\n\n    //Decode literal entities\n    for (var i in entities) {\n        str = str.replace(new RegExp(i, 'g'), entities[i]);\n    }\n\n    //Decode hex entities\n    str = str.replace(/&#x(0*[0-9a-f]{2,5});?/gi, function (m, code) {\n        return String.fromCharCode(parseInt(+code, 16));\n    });\n\n    //Decode numeric entities\n    str = str.replace(/&#([0-9]{2,4});?/gi, function (m, code) {\n        return String.fromCharCode(+code);\n    });\n\n    str = str.replace(/&amp;/g, '&');\n\n    return str;\n}\n\nexports.encode = function (str) {\n    str = str.replace(/&/g, '&amp;');\n\n    //IE doesn't accept &apos;\n    str = str.replace(/'/g, '&#39;');\n\n    //Encode literal entities\n    for (var i in entities) {\n        str = str.replace(new RegExp(entities[i], 'g'), i);\n    }\n\n    return str;\n}\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/vendor/validator/lib/xss.js":"//This module is adapted from the CodeIgniter framework\n//The license is available at http://codeigniter.com/\n\nvar html_entity_decode = require('./entities').decode;\n\nvar never_allowed_str = {\n    'document.cookie':              '[removed]',\n    'document.write':               '[removed]',\n    '.parentNode':                  '[removed]',\n    '.innerHTML':                   '[removed]',\n    'window.location':              '[removed]',\n    '-moz-binding':                 '[removed]',\n    '<!--':                         '&lt;!--',\n    '-->':                          '--&gt;',\n    '<![CDATA[':                    '&lt;![CDATA['\n};\n\nvar never_allowed_regex = {\n    'javascript\\\\s*:':              '[removed]',\n    'expression\\\\s*(\\\\(|&\\\\#40;)':  '[removed]',\n    'vbscript\\\\s*:':                '[removed]',\n    'Redirect\\\\s+302':              '[removed]'\n};\n\nvar non_displayables = [\n    /%0[0-8bcef]/g,           // url encoded 00-08, 11, 12, 14, 15\n    /%1[0-9a-f]/g,            // url encoded 16-31\n    /[\\x00-\\x08]/g,           // 00-08\n    /\\x0b/g, /\\x0c/g,         // 11,12\n    /[\\x0e-\\x1f]/g            // 14-31\n];\n\nvar compact_words = [\n    'javascript', 'expression', 'vbscript',\n    'script', 'applet', 'alert', 'document',\n    'write', 'cookie', 'window'\n];\n\nexports.clean = function(str, is_image) {\n\n    //Recursively clean objects and arrays\n    if (typeof str === 'array' || typeof str === 'object') {\n        for (var i in str) {\n            str[i] = exports.clean(str[i]);\n        }\n        return str;\n    }\n\n    //Remove invisible characters\n    str = remove_invisible_characters(str);\n\n    //Protect query string variables in URLs => 901119URL5918AMP18930PROTECT8198\n    str = str.replace(/\\&([a-z\\_0-9]+)\\=([a-z\\_0-9]+)/i, xss_hash() + '$1=$2');\n\n    //Validate standard character entities - add a semicolon if missing.  We do this to enable\n    //the conversion of entities to ASCII later.\n    str = str.replace(/(&\\#?[0-9a-z]{2,})([\\x00-\\x20])*;?/i, '$1;$2');\n\n    //Validate UTF16 two byte encoding (x00) - just as above, adds a semicolon if missing.\n    str = str.replace(/(&\\#x?)([0-9A-F]+);?/i, '$1;$2');\n\n    //Un-protect query string variables\n    str = str.replace(xss_hash(), '&');\n\n    //Decode just in case stuff like this is submitted:\n    //<a href=\"http://%77%77%77%2E%67%6F%6F%67%6C%65%2E%63%6F%6D\">Google</a>\n    try{  \n      str = decodeURIComponent(str);\n    }\n    catch(error){\n      // str was not actually URI-encoded\n    }\n\n    //Convert character entities to ASCII - this permits our tests below to work reliably.\n    //We only convert entities that are within tags since these are the ones that will pose security problems.\n    str = str.replace(/[a-z]+=([\\'\\\"]).*?\\\\1/gi, function(m, match) {\n        return m.replace(match, convert_attribute(match));\n    });\n\n    //Remove invisible characters again\n    str = remove_invisible_characters(str);\n\n    //Convert tabs to spaces\n    str = str.replace('\\t', ' ');\n\n    //Captured the converted string for later comparison\n    var converted_string = str;\n\n    //Remove strings that are never allowed\n    for (var i in never_allowed_str) {\n        str = str.replace(i, never_allowed_str[i]);\n    }\n\n    //Remove regex patterns that are never allowed\n    for (var i in never_allowed_regex) {\n        str = str.replace(new RegExp(i, 'i'), never_allowed_regex[i]);\n    }\n\n    //Compact any exploded words like:  j a v a s c r i p t\n    // We only want to do this when it is followed by a non-word character\n    for (var i in compact_words) {\n        var spacified = compact_words[i].split('').join('\\\\s*')+'\\\\s*';\n\n        str = str.replace(new RegExp('('+spacified+')(\\\\W)', 'ig'), function(m, compat, after) {\n            return compat.replace(/\\s+/g, '') + after;\n        });\n    }\n\n    //Remove disallowed Javascript in links or img tags\n    do {\n        var original = str;\n\n        if (str.match(/<a/i)) {\n            str = str.replace(/<a\\\\s+([^>]*?)(>|$)/gi, function(m, attributes, end_tag) {\n                attributes = filter_attributes(attributes.replace('<','').replace('>',''));\n                return m.replace(attributes, attributes.replace(/href=.*?(alert\\(|alert&\\#40;|javascript\\:|charset\\=|window\\.|document\\.|\\.cookie|<script|<xss|base64\\\\s*,)/gi, ''));\n            });\n        }\n\n        if (str.match(/<img/i)) {\n            str = str.replace(/<img\\\\s+([^>]*?)(\\\\s?\\/?>|$)/gi, function(m, attributes, end_tag) {\n                attributes = filter_attributes(attributes.replace('<','').replace('>',''));\n                return m.replace(attributes, attributes.replace(/src=.*?(alert\\(|alert&\\#40;|javascript\\:|charset\\=|window\\.|document\\.|\\.cookie|<script|<xss|base64\\\\s*,)/gi, ''));\n            });\n        }\n\n        if (str.match(/script/i) || str.match(/xss/i)) {\n            str = str.replace(/<(\\/*)(script|xss)(.*?)\\>/gi, '[removed]');\n        }\n\n    } while(original != str);\n\n    //Remove JavaScript Event Handlers - Note: This code is a little blunt.  It removes the event\n    //handler and anything up to the closing >, but it's unlikely to be a problem.\n    event_handlers = ['[^a-z_\\-]on\\w*'];\n\n    //Adobe Photoshop puts XML metadata into JFIF images, including namespacing,\n    //so we have to allow this for images\n    if (!is_image) {\n        event_handlers.push('xmlns');\n    }\n\n    str = str.replace(new RegExp(\"<([^><]+?)(\"+event_handlers.join('|')+\")(\\\\s*=\\\\s*[^><]*)([><]*)\", 'i'), '<$1$4');\n\n    //Sanitize naughty HTML elements\n    //If a tag containing any of the words in the list\n    //below is found, the tag gets converted to entities.\n    //So this: <blink>\n    //Becomes: &lt;blink&gt;\n    naughty = 'alert|applet|audio|basefont|base|behavior|bgsound|blink|body|embed|expression|form|frameset|frame|head|html|ilayer|iframe|input|isindex|layer|link|meta|object|plaintext|style|script|textarea|title|video|xml|xss';\n    str = str.replace(new RegExp('<(/*\\\\s*)('+naughty+')([^><]*)([><]*)', 'gi'), function(m, a, b, c, d) {\n        return '&lt;' + a + b + c + d.replace('>','&gt;').replace('<','&lt;');\n    });\n\n    //Sanitize naughty scripting elements Similar to above, only instead of looking for\n    //tags it looks for PHP and JavaScript commands that are disallowed.  Rather than removing the\n    //code, it simply converts the parenthesis to entities rendering the code un-executable.\n    //For example:    eval('some code')\n    //Becomes:        eval&#40;'some code'&#41;\n    str = str.replace(/(alert|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\\\\s*)\\((.*?)\\)/gi, '$1$2&#40;$3&#41;');\n\n    //This adds a bit of extra precaution in case something got through the above filters\n    for (var i in never_allowed_str) {\n        str = str.replace(i, never_allowed_str[i]);\n    }\n    for (var i in never_allowed_regex) {\n        str = str.replace(new RegExp(i, 'i'), never_allowed_regex[i]);\n    }\n\n    //Images are handled in a special way\n    if (is_image && str !== converted_string) {\n        throw new Error('Image may contain XSS');\n    }\n\n    return str;\n}\n\nfunction remove_invisible_characters(str) {\n    for (var i in non_displayables) {\n        str = str.replace(non_displayables[i], '');\n    }\n    return str;\n}\n\nfunction xss_hash() {\n    //TODO: Create a random hash\n    return '!*$^#(@*#&';\n}\n\nfunction convert_attribute(str) {\n    return str.replace('>','&gt;').replace('<','&lt;').replace('\\\\','\\\\\\\\');\n}\n\n//Filter Attributes - filters tag attributes for consistency and safety\nfunction filter_attributes(str) {\n    out = '';\n\n    str.replace(/\\\\s*[a-z\\-]+\\\\s*=\\\\s*(?:\\042|\\047)(?:[^\\\\1]*?)\\\\1/gi, function(m) {\n        $out += m.replace(/\\/\\*.*?\\*\\//g, '');\n    });\n\n    return out;\n}\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/lib/node.io/io.js":"/*!\n * node.io\n * Copyright(c) 2010 Chris O'Hara <cohara87@gmail.com>\n * MIT Licensed\n */\n\nvar fs = require('fs'),\n    utils = require('./utils'),\n    Job = require('./job').JobProto;\n\n//Used to ensure reads/writes are returned/performed in the same order as they are requested\nvar write_request_id = 1, read_request_id = 1, \n    last_write_id = 1,  last_read_id = 1;\n\n/**\n * The default job input method - read from STDIN.\n *\n * @param {Number} start\n * @param {Number} num\n * @param {Function} callback\n * @api public\n */\nJob.prototype.input = function (start, num, callback) {\n    this.debug('Reading from STDIN');\n    var stream = process.openStdin();\n    this.inputStream(stream);\n    this.input.apply(this, arguments);\n};\n\n/**\n * The default job output method - write to STDOUT.\n *\n * @param {String} data\n * @api public\n */\nJob.prototype.output = function (data) {\n    this.debug('Writing to STDOUT');\n    this.outputStream(process.stdout, 'stdout');\n    this.output.apply(this, arguments);\n};\n\n/**\n * Reads input from the specified stream. Replaces subsequent\n * calls to job.input().\n *\n * @param {Object} stream\n * @api public\n */\nJob.prototype.inputStream = function (stream) {\n    this.initInputStream(stream);\n    this.input = this.takeInputStreamLines;\n};\n\n/**\n * Writes output to the specified stream. Replaces subsequent \n * calls to job.output().\n *\n * @param {Object} stream\n * @param {String} name (optional)\n * @api public\n */\nJob.prototype.outputStream = function (stream, name) {\n    name = name || Math.floor(Math.random() * 1000000);\n    this.output_streams[name] = stream;\n    this.output = function (data) {\n        this.write(name, data);\n    };\n};\n\n/**\n * Reads input from the specified file.\n *\n * @param {String} path\n * @api public\n */\nJob.prototype.inputFromFile = function (path) {\n    this.debug('Reading from ' + path);\n    this.in_file = path;\n    var stream = fs.createReadStream(path, {bufferSize: this.options.read_buffer});\n    this.inputStream(stream);\n};\n\n/**\n * Finds all files in the specified directory and returns each file \n * path as input. To recurse subdirectories, set the `recurse` op.\n *\n * @param {String} path\n * @api public\n */\nJob.prototype.inputFromDirectory = function (path) {\n    var self = this, files = fs.readdirSync(path);\n\n    this.debug('Reading files in ' + path);\n\n    //Trim trailing slash\n    var trim_slash = function (path) {\n        if (path[path.length - 1] === '/') {\n            path = path.substr(0, path.length - 1);\n        }\n        return path;\n    };\n    path = trim_slash(path);\n\n    //Store full paths \n    for (var i = 0, l = files.length; i < l; i++) {\n        files[i] = path + '/' + files[i];\n    }\n\n    this.input = function (start, num) {\n        if (files.length > start) {\n            return files.slice(start, start + num);\n        } else {\n            return false;\n        }\n    };\n\n    //Recurse subdirectories if the `recurse` op is set\n    if (this.options.recurse) {\n\n        var run_method = this.run;\n\n        this.run = function (path) {\n            self = this;\n            fs.stat(path, function (err, stat) {\n\n                if (err) {\n\n                    self.exit(err);\n                }\n\n                if (!stat.isDirectory()) {\n\n                    //If it's not a directory, continue as normal\n                    run_method.apply(self, [path]);\n\n                } else {\n\n                    fs.readdir(path, function (err, files) {\n                        if (err) {\n                            self.exit(err);\n                        }\n\n                        var dir_files = [];\n\n                        path = trim_slash(path);\n\n                        for (var i = 0, l = files.length; i < l; i++) {\n                            dir_files.push(path + '/' + files[i]);\n                        }\n\n                        //Use the addInput() hook rather than files.push(file) so that recursing\n                        //plays nice with multiple processes (i.e. is shared evenly)\n                        self.add(dir_files);\n                        self.skip();\n                    });\n                }\n            });\n        };\n    }\n};\n\n/**\n * Initialises the specified input stream and adds event handlers.\n *\n * @param {Object} stream\n * @api public\n */\nJob.prototype.initInputStream = function (stream) {\n    var self = this;\n\n    //Clear any previous input stream\n    if (this.input_stream && this.input_stream.stream) {\n        this.input_stream.stream.destroy();\n    }\n\n    stream.setEncoding('utf8');\n\n    this.input_stream = {\n        stream: stream,\n        lines: [],\n        last_line: '',\n        end: false,\n        paused: false\n    };\n\n    this.input_stream.stream.on('data', function (data) {        \n        if (self.input_stream.end) return;\n        self.handleInputStream(data);\n        self.bytes_read += data.length;\n    });\n\n    this.input_stream.stream.on('end', function () {\n        self.input_stream.end = true;\n        if (self.input_stream.last_line.length) {\n            self.input_stream.lines.push(self.input_stream.last_line);\n            self.input_stream.last_line = '';\n        }\n    });\n\n    this.input_stream.stream.on('error', this.exit);\n};\n\n/**\n * Handles chunks of data from the input stream. \n *\n * @param {String} data\n * @api public\n */\nJob.prototype.handleInputStream = function (data) {    \n    var self = this;\n\n    data = this.input_stream.last_line + data;\n\n    var lines = data.split('\\n'), line, line_length;\n\n    for (var i = 0, l = lines.length; i < l; i++) {\n        line = lines[i];\n        line_length = line.length;\n        if (line[line_length - 1] === '\\r') {\n            line = line.substr(0, line_length - 1);\n        }\n        self.input_stream.lines.push(line);\n    }\n\n    //Last line is incomplete\n    this.input_stream.last_line = this.input_stream.lines.pop();\n\n    if (this.input_stream.lines.length > 10000) {\n        this.input_stream.stream.pause();\n        this.input_stream.paused = true;\n    }\n};\n\n/**\n * Returns lines (\\n or \\r\\n terminated) from the input stream. Lines are returned\n * in the same order as they are requested.\n *\n * @param {Number} start\n * @param {Number} num\n * @param {Function} callback\n * @api public\n */\nJob.prototype.takeInputStreamLines = function (start, num, callback, read_id) {\n    var self = this;\n\n    if (this.input_stream.paused && this.input_stream.lines.length <= 5000) {\n        this.input_stream.paused = false;\n        this.input_stream.stream.resume();\n    }\n\n    read_id = read_id || read_request_id++;\n\n    if (this.input_stream.end || this.input_stream.lines.length >= num) {\n\n        var return_lines = function () {\n            if (read_id !== last_read_id && !self.input_stream.end) {\n                //Wait for a previous request to return lines\n                utils.tick(return_lines);\n            } else {\n                last_read_id++;\n                callback(self.input_stream.lines.length ? self.input_stream.lines.splice(0, num) : false);\n            }\n        };\n        return_lines();\n\n    } else {\n        utils.tick(function () {\n            self.takeInputStreamLines(start, num, callback, read_id);\n        });\n    }\n};\n\n/**\n * Handles special job method definitions.\n *\n * @api public\n */\nJob.prototype.handleSpecialIO = function () {\n    var self = this;\n\n    //If output is a string, assume it's a file and write to it when ouput is called\n    if (typeof this.output === 'string') {\n        this.out_file = this.output;\n\n        this.debug('Writing to ' + this.out_file);\n\n        //Write output to the file\n        this.output = function (data) {\n            self.write(this.out_file, data);\n        };\n    }\n\n    //If input is true, return as much input as the processor is asking for (i.e. job will run forever)\n    if (this.input === true) {\n        this.input = function (start, num) {\n            var arr = [];\n            while (num--) {\n                arr.push(null);\n            }\n            return arr;\n        };\n    }\n\n    //If input is false, run the job once\n    if (this.input === false) {\n        this.options.fork = false;\n        this.options.max = 1;\n        this.options.take = 1;\n        var run_once = false;\n        this.input = function (start, num) {\n            if (!run_once) {\n                run_once = true;\n                return [null];\n            } else {\n                return false;\n            }\n        };\n    }\n\n    //If output is false, discard output\n    if (this.output === false) {\n        this.output = function () {};\n    }\n\n    //If input is an array, slice it for input\n    if (this.input instanceof Array) {\n        var arr = this.input;\n        this.input = function (start, num) {\n            return start >= arr.length ? false : arr.slice(start, start + num);\n        };\n    }\n\n    //If input is a string, assume it's a file or directory\n    if (typeof this.input === 'string') {\n\n        var path = this.input, stat = fs.statSync(path);\n\n        this.debug('Reading from ' + path);\n\n        if (stat.isFile()) {\n\n            //Read lines from the file\n            this.inputFromFile(path);\n\n        } else if (stat.isDirectory()) {\n\n            //Return all files in the directory\n            this.inputFromDirectory(path);\n\n        } else {\n            this.exit('Unknown input: ' + path);\n        }\n    }\n};\n\n/**\n * Reads all data from the specified file. If `callback` isn't specified\n * the operation is synchronous.\n *\n * @param {String} file\n * @param {Function} callback\n * @api public\n */\nJob.prototype.read = function (file, callback) {\n    if (callback) {\n        fs.readFile(file, this.options.encoding, callback);\n    } else {\n        return fs.readFileSync(file, this.options.encoding);\n    }\n};\n\n/**\n * Writes data to the specified file. Writes are performed in the same order as \n * write() is called.\n *\n * @param {String} file\n * @param {String} data\n * @param {Function} callback (optional)\n * @api public\n */\nJob.prototype.write = function (file, data, callback) {\n    var self = this;\n\n    //Cache FD's\n    if (typeof this.output_streams[file] === 'undefined') {\n        var write_mode = {flags: 'w', mode: 0644, encoding: this.options.encoding};\n        this.output_streams[file] = fs.createWriteStream(file, write_mode);\n        this.output_streams[file].on('error', self.exit);\n    }\n\n    //Ensure data is written in the same order as write() is called\n    var write_id = write_request_id++;\n\n    var write_lines = function () {\n        if (write_id !== last_write_id) {\n\n            //Wait for a previous requests\n            utils.tick(write_lines);\n\n        } else {\n            last_write_id++;\n\n            var str = utils.dataToString(data, self.options.newline);\n            var written = self.output_streams[file].write(str);\n\n            if (file !== 'stdout') {\n                self.bytes_written += str.length;\n            }\n\n            if (callback) {\n                if (written) {\n                    callback();\n                } else {\n                    self.output_streams[file].on('drain', callback);\n                }\n            }\n        }\n    };\n    write_lines();\n};\n\n/**\n * Appends data to the specified file. Writes are performed in the same order as \n * append() is called.\n *\n * @param {String} file\n * @param {String} data\n * @param {Function} callback (optional)\n * @api public\n */\nJob.prototype.append = function (file, data, callback) {\n    var self = this;\n    if (typeof this.output_streams[file] === 'undefined') {\n        var write_mode = {flags: 'a', mode: 666, encoding: this.options.encoding};\n        this.output_streams[file] = fs.createWriteStream(file, write_mode);\n        this.output_streams[file].on('error', self.exit);\n    }\n    this.write.apply(this, arguments);\n};\n\n/**\n * Waits for all output streams to drain before calling `callback`.\n *\n * @param {Function} callback\n * @api public\n */\nJob.prototype.waitForOutputStreamDrains = function (callback) {\n    var self = this;\n    if (this.out_file) {\n        this.status('Waiting on output stream(s) to drain..');\n    }\n    var wait_for_drain = function () {\n        var keep_waiting = false;\n        for (var i in self.output_streams) {\n            var stream = self.output_streams[i];\n            if (stream._queue) {\n                if (stream._queue.length === 0) {\n                    stream.end();\n                } else {\n                    keep_waiting = true;\n                }\n            } else if (stream._writeQueue) {\n                if (stream._writeQueue.length === 0) {\n                    stream.end();\n                } else {\n                    keep_waiting = true;\n                }\n            } else {\n                continue;\n            }\n        }\n        if (keep_waiting) {\n            setTimeout(wait_for_drain, 100);\n        } else {\n            //Done!\n            callback();\n        }\n    };\n    wait_for_drain();\n}\n\n/**\n * Parses a line into values using the specified delimiter, quote and\n * quote escape char. The second parameter can also be 'csv' or 'tsv'\n * which parses the line using the default Comma/Tab Separated Values\n * configuration.\n *\n * @param {String} line\n * @param {String} delim\n * @param {String} quote (optional)\n * @param {String} quote_escape (optional)\n * @api public\n */\nvar cache = {};\nJob.prototype.parseValues = function(line, delim, quote, quote_escape) {\n    if (typeof delim === 'undefined' || delim === 'csv') {\n        delim = ',';\n    } else if (delim === 'tsv') {\n        delim = '\\t';\n    }\n    quote = quote || '\"';\n    quote_escape = quote_escape || '\"';\n\n    //Check for cached regex patterns\n    var match, clean, q;\n    if (typeof cache[''+delim+quote+quote_escape] !== 'undefined') {\n\n        var patterns = cache[''+delim+quote+quote_escape];\n        match = patterns[0];\n        clean = patterns[1];\n        q = patterns[2];\n\n    } else {\n\n        //Escape special regex chars\n        var d, escape = function (str) {\n            return str.replace(new RegExp('[.*+?|()\\\\[\\\\]{}]', 'g'), '\\\\$&');\n        }\n\n        d = escape(delim);\n        e = escape(quote_escape);\n        q = escape(quote);\n\n        match = new RegExp(\n            '(' + d + '|^)' +\n            '(?:' + q + '([^' + q + ']*(?:' + e + q + '[^' + q + ']*)*)' + q + '|' +\n            '([^' + q + d + ']*))'\n        , 'g');\n\n        clean = new RegExp(e + q, 'g');\n\n        //Cache the patterns for subsequent calls\n        cache[delim+quote+quote_escape] = [match, clean, q];\n    }\n\n    var matches = null, value, csv = [];\n\n    while (matches = match.exec(line)) {\n        if (!matches[1] && csv.length) {\n            break;\n        } else if (matches[2]) {\n            value = matches[2].replace(clean, q);\n        } else {\n            value = matches[3] || '';\n        }\n        csv.push(value);\n    }\n\n    return csv;\n}\n\n/**\n * The opposite of parseValues. Writes values to a line using the specified\n * separation characters or configuration (csv / tsv).\n *\n * @param {String} values\n * @param {String} delim\n * @param {String} quote (optional)\n * @param {String} quote_escape (optional)\n * @api public\n */\nJob.prototype.writeValues = function(values, delim, quote, quote_escape) {\n    if (typeof delim === 'undefined' || delim === 'csv') {\n        delim = ',';\n    } else if (delim === 'tsv') {\n        delim = '\\t';\n    }\n    quote = quote || '\"';\n    quote_escape = quote_escape || '\"';\n\n    if (values instanceof Array) {\n        var quoted_values = [], value,\n            quote_reg = new RegExp('[' + quote + ']', 'g'),\n            requires_quotes = new RegExp('[' + delim + '\\r\\n]');\n\n        for (var i = 0, l = values.length; i < l; i++) {\n            value = values[i] == null ? '' : '' + values[i];\n            if (value && value.indexOf(quote) > -1) {\n                value = quote + value.replace(quote_reg, quote_escape + quote) + quote;\n            } else if (value == '' || requires_quotes.test(value)) {\n                value = quote + value + quote;\n            }\n            quoted_values.push(value);\n        }\n        values = quoted_values.join(delim);\n    }\n    return values;\n}\n\n/**\n * Returns the total bytes read by any read() calls or input streams.\n *\n * @return {Number} bytes_read\n * @api public\n */\nJob.prototype.getBytesRead = function () {\n    return this.bytes_read;\n};\n\n/**\n * Returns the total bytes written by any write() or append() calls.\n *\n * @return {Number} bytes_written\n * @api public\n */\nJob.prototype.getBytesWritten = function () {\n    return this.bytes_written;\n};\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/lib/node.io/request.js":"/*!\n * node.io\n * Copyright(c) 2010 Chris O'Hara <cohara87@gmail.com>\n * MIT Licensed\n */\n\nvar http = require('http'),\n    https = require('https'),\n    resolve = require('url').resolve,\n    urlparse = require('url').parse,\n    query = require('querystring'),\n    Job = require('./job').JobProto,\n    utils = require('./utils')\n    request = require('request');\n\n/**\n * The default headers to send when using createClient()\n */\nvar default_headers = {\n    accept: '*/*',\n    'accept-charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',\n    'user-agent': 'node.io'\n};\n\n/**\n * Some user-agents for spoofing\n */\nvar user_agents = [\n    'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)',\n    'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0)',\n    'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 6.0)',\n    'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.13) Gecko/20101203 Firefox/3.6.13',\n    'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6',\n    'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30)',\n    'Opera/9.20 (Windows NT 6.0; U; en)',\n    'Mozilla/5.0 (Windows; U; Windows NT 6.1; ru; rv:1.9.2) Gecko/20100115 Firefox/3.6',\n    'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; MS-RTC LM 8)',\n    'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.2 (KHTML, like Gecko) Chrome/6.0',\n    'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_7; en-us) AppleWebKit/533.4 (KHTML, like Gecko) Version/4.1 Safari/533.4',\n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_6) AppleWebKit/534.22 (KHTML, like Gecko) Chrome/11.0.683.0 Safari/534.22'\n];\n\n/**\n * Makes a GET request to the specified resource. See doRequest().\n *\n * @param {String} resource\n * @param {Object} headers (optional)\n * @param {Function} callback\n * @param {Function} parse (optional)\n * @api public\n */\nJob.prototype.get = function (resource, headers, callback, parse) {\n    this.doRequest('GET', resource, null, headers, callback, parse);\n};\n\n/**\n * Makes a POST request to the specified resource. See doRequest().\n *\n * @param {String} resource\n * @param {Object} body (optional)\n * @param {Object} headers (optional)\n * @param {Function} callback\n * @param {Function} parse (optional)\n * @api public\n */\nJob.prototype.post = function (resource, body, headers, callback, parse) {\n    this.doRequest('POST', resource, body, headers, callback, parse);\n};\n\n/**\n * Makes a HEAD request to the specified resource. See doRequest().\n *\n * @param {String} resource\n * @param {Object} headers (optional)\n * @param {Function} callback\n * @api public\n */\nJob.prototype.head = function (resource, headers, callback) {\n    this.doRequest('HEAD', resource, null, headers, callback, null);\n};\n\n/**\n * Makes a GET request to the specified resource and returns a selector object.\n * See parseHtml() in ./dom.js\n *\n * @param {String} resource\n * @param {Object} headers (optional)\n * @param {Function} callback\n * @param {Function} parse (optional)\n * @api public\n */\nJob.prototype.getHtml = function (resource, headers, callback, parse) {\n    var self = this;\n\n    if (!this.options.jsdom) {\n        this.prepareHtmlparser();\n    }\n\n    //`headers` is optional\n    if (typeof headers === 'function') {\n        callback = headers;\n        headers = default_headers;\n    }\n\n    this.get(resource, headers, function (err, data, headers, response) {\n        if (err) {\n            callback.call(this, err);\n        } else {\n            self.parseHtml(data, callback, response);\n        }\n    }, parse);\n};\n\n/**\n * Makes a POST request to the specified resource and returns a selector object.\n * See parseHtml() in ./dom.js\n *\n * @param {String} resource\n * @param {Object} body (optional)\n * @param {Object} headers (optional)\n * @param {Function} callback\n * @param {Function} parse (optional)\n * @api public\n */\nJob.prototype.postHtml = function (resource, body, headers, callback, parse) {\n    var self = this;\n\n    if (!this.options.jsdom) {\n        this.prepareHtmlparser();\n    }\n\n    //`body` and `headers` are optional\n    if (typeof body === 'function') {\n        callback = body;\n        preparse = headers;\n        headers = default_headers;\n    } else if (typeof headers === 'function') {\n        parse = callback;\n        callback = headers;\n        headers = default_headers;\n    }\n\n    this.post(resource, body, headers, function (err, data, headers, response) {\n        if (err) {\n            callback.call(this, err);\n        } else {\n            self.parseHtml(data, callback, response);\n        }\n    }, parse);\n};\n\n/**\n * Encodes the body of a request.\n *\n * @param {Object} body\n * @param {Boolean} use_json (optional)\n * @api public\n */\nJob.prototype.encodeBody = function (body, use_json) {\n    if (use_json) {\n        JSON.stringify(body);\n    } else {\n        query.stringify(body);\n    }\n};\n\n/**\n * Makes a request to the specified resource and returns the response body\n * response headers. `callback` takes (err, data, headers).\n *\n * `parse` is an optional callback which can be used to filter or decode the body\n * before `callback` is called.\n *\n * @param {String} method\n * @param {String} resource\n * @param {Object} body (optional)\n * @param {Object} headers (optional)\n * @param {Function} callback\n * @param {Function} parse (optional)\n * @api public\n */\nJob.prototype.doRequest = function (method, resource, body, headers, callback, parse) {\n    var self = this, host, port, url, path, rid, secure, h, options, on_complete;\n\n    //Give each a request a unique ID for debugging\n    rid = Math.floor(Math.random() * 100000);\n\n    //`body` and `headers` are optional\n    if (typeof body === 'function') {\n        parse = headers;\n        callback = body;\n        headers = default_headers;\n        body = null;\n    } else if (typeof headers === 'function') {\n        parse = callback;\n        callback = headers;\n        headers = default_headers;\n    } else {\n        //Add default headers\n        utils.put_default(headers, default_headers);\n    }\n\n    //Proxy the callback to provide auto retry support\n    on_complete = callback;\n    callback = function() {\n        if (self.options.auto_retry) {\n            var err = Array.prototype.slice.call(arguments)[0];\n            try {\n                if (err) {\n                    throw err;\n                }\n                on_complete.apply(self, arguments);\n            } catch (e) {\n                self.retry();\n            }\n        } else {\n            on_complete.apply(self, arguments);\n        }\n    };\n\n    //Add a protocol if there isn't one\n    if (!resource.match(/https?:\\/\\//)) {\n        resource = 'http://' + resource;\n    }\n\n    //Parse the URL into parts\n    url = urlparse(resource, false),\n\n    //Get the request path\n    path = url.pathname || '/';\n    if (url.search) {\n        path += url.search;\n    }\n\n    //Copy `headers` before modifying it\n    headers = utils.put({}, headers);\n    \n    //Set a random user agent if using --spoof\n    if (this.options.spoof) {\n        headers['user-agent'] = user_agents[Math.floor(Math.random() * user_agents.length)];\n    }\n\n    //Add headers from a previous request if this is a nested request\n    if (this.last.headers) {\n        utils.put(headers, this.last.headers);\n    }\n\n    //Add headers added by setHeader, setCookie, etc.\n    utils.put(headers, this.next);\n    this.next = {};\n\n    //Prepare the body to write and get the content length\n    if (body) {\n        if (typeof body === 'object') {\n            body = query.stringify(body);\n        }\n        headers['Content-Length'] = Buffer.byteLength(body);\n    }\n\n    method = method.toUpperCase();\n\n    //Debug request headers\n    this.debug('\\033[7m'+method+'\\033[0m '+resource + ' (request ' + rid + ')');\n    this.debug('  | ' + method + ' ' + path + ' HTTP/1.1');\n    for (h in headers) {\n        this.debug('  | ' + h[0].toUpperCase() + h.substr(1) + ': ' + headers[h]);\n    }\n\n    options = {\n        url: url,\n        method: method,\n        headers: headers,\n        body: body,\n        maxRedirects: this.options.redirects,\n        followRedirect: this.options.redirects > 0,\n        followAllRedirects: this.options.redirects > 0,\n        encoding: this.options.encoding,\n        jar: false,\n        pool: false\n    }\n\n    //Use a HTTP proxy?\n    if (this.options.proxy) {\n        options.proxy = typeof this.options.proxy === 'function'\n                      ? this.options.proxy()\n                      : this.options.proxy;\n    }\n\n    //Set a request timeout?\n    if (this.options.timeout) {\n        self.cancel_timeout();\n        options.timeout = this.options.timeout * 1000;\n    }\n\n    request(options, function (err, response, body) {\n        if (self.is_complete) {\n            return;\n        }\n\n        if (err) {\n            self.debug('\\x1B[31mERR\\x1B[0m Request ' + rid + ' failed with (' + (err.errno || '?') + ') ' + err + ' ('+resource+')');\n            if (/maxRedirects/.test(err.message)) {\n                err = 'redirects'; //compat\n            }\n            return callback(err);\n        }\n\n        var code = response.statusCode || 200;\n\n        //Debug response headers\n        self.debug('\\033[7m'+code+'\\033[0m '+resource + ' (response ' + rid + ')');\n        for (h in response.headers) {\n            self.debug('  | ' + h[0].toUpperCase() + h.substr(1) + ': ' + response.headers[h]);\n        }\n\n        //Save the response headers for the next request (if to the same host)\n        var cookies = response.headers['set-cookie'];\n        self.last = {\n            url: resource,\n            host: url.hostname,\n            headers: {\n                referer: resource,\n                cookie: cookies instanceof Array ? cookies.join('; ') : cookies\n            }\n        };\n\n        //Handle http response codes\n        if (!self.ignore_code) {\n            switch (Math.floor(code/100)) {\n                case 3:\n                case 4:\n                case 5:\n                    self.debug('\\x1B[31mERR\\x1B[0m Request ' + rid + ' failed with code ' + code + ' ('+resource+')');\n                    return callback(code);\n            }\n        }\n\n        var parse_callback = function (err, data) {\n            callback(err, data, response.headers, response);\n        }\n\n        //Parse the response body with a custom parser?\n        if (parse) {\n            var ret = parse(body, parse_callback);\n            if (typeof ret !== 'undefined') {\n                callback(null, ret, response.headers, response);\n            }\n        } else {\n            parse_callback(null, body)\n        }\n    });\n};\n\n/**\n * Sets a header on the next request.\n *\n * @param {Object|String} key\n * @param {String} value\n * @api public\n */\nJob.prototype.setHeader = function (key, value) {\n    if (typeof key === 'object') {\n        utils.put(this.next, key);\n    } else {\n        this.next[key.toLowerCase()] = value;\n    }\n};\n\n/**\n * Sets the Cookie for the next request.\n *\n * @param {String} cookie\n * @api public\n */\nJob.prototype.setCookie = function (key, value) {\n    if (value) {\n        key = encodeURIComponent(key) + '=' + encodeURIComponent(value);\n    }\n    this.setHeader('cookie', key);\n};\n\n/**\n * Sets the User-Agent for the next request.\n *\n * @param {String} agent\n * @api public\n */\nJob.prototype.setUserAgent = function (agent) {\n    this.setHeader('user-agent', agent);\n};\n\n/**\n * Adds a cookie to the next request.\n *\n * @param {String} key\n * @param {String} value\n * @api public\n */\nJob.prototype.addCookie = function (key, value) {\n    key = encodeURIComponent(key);\n    value = encodeURIComponent(value);\n    if (typeof this.next.cookie !== 'undefined' && this.next.cookie.length) {\n        this.next.cookie += '; ' + key + '=' + value;\n    } else {\n        this.next.cookie = key + '=' + value;\n    }\n};\n\n/**\n * Returns the total bytes received by any doRequest() calls.\n *\n * @return {Number} bytes_received\n * @api public\n */\nJob.prototype.getBytesReceived = function () {\n    return this.bytes_received;\n};\n\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/lib/node.io/dom.js":"/*!\n * node.io\n * Copyright(c) 2010 Chris O'Hara <cohara87@gmail.com>\n * MIT Licensed\n */\n\nvar Job = require('./job').JobProto,\n    utils = require('./utils'),\n    soupselect;\n\n/**\n * The CSS selector function. See the documentation for usage examples.\n *\n * @param {String} selector\n * @param {Function} context\n * @api public\n */\nJob.prototype.$ = function (selector, context, suppressErrors) {\n    suppressErrors = suppressErrors || false;\n    if (!soupselect) {\n        soupselect = require('../../vendor/soupselect').select;\n    }\n    var selected = soupselect(context, selector);\n    if (selected.length === 0) {\n        this.debug('\\x1B[31mERR\\x1B[0m No elements matching \"' + selector + '\"');\n        if (suppressErrors)\n          selected = false;\n        else\n          throw new Error(\"No elements matching '\" + selector + \"'\");\n    } else if (selected.length === 1 && this.options.expand_single_selected) {\n        selected = selected[0];\n        this.bindToDomElement(selected);\n    } else {\n        this.bindToDomCollection(selected);\n    }\n    return selected;\n}\n\n/**\n * Parses the specified data using HtmlParser and SoupSelect. `callback` takes\n * (err, $, data, headers) - $ is the selector object bound to the parsed DOM.\n *\n * @param {String} data\n * @param {Function} callback\n * @param {Object} headers (optional)\n * @api public\n */\nJob.prototype.parseHtml = function (data, callback, response) {\n    var self = this, recurse = this.options.recurse;\n    var headers = response && response.headers ? response.headers : {};\n    if (this.options.jsdom) {\n        var features = {\n                FetchExternalResources: this.options.external_resources,\n                ProcessExternalResources: this.options.external_resources,\n                QuerySelector: false\n        };\n        var $, jquery, default_$;\n        try {\n            this.window = require('jsdom').jsdom(data, null, {features:features, url:response.url}).createWindow();\n            jquery = require('jquery');\n            default_$ = jquery.create(this.window);\n            $ = function (selector, context) {\n                return context ? jquery.create(context)(selector) : default_$(selector);\n            };\n        } catch (e) {\n            callback.apply(self, [e, $, data, headers, response]);\n            return;\n        }\n        if (recurse === 1 || recurse === true || recurse instanceof Array) {\n            this.recurseUrls($);\n        }\n        callback.apply(self, [null, $, data, headers, response]);\n    } else {\n        var self = this;\n        this.postParse = function (err, dom) {\n            if (err) {\n                callback.call(self, err);\n            } else {\n                $ = function (selector, context, suppressErrors) {\n                    //Allow the user to specify a custom context (thanks to github.com/jimbishopp)\n                    return self.$(selector, context || dom, suppressErrors);\n                };\n                if (recurse === 1 || recurse === true || recurse instanceof Array) {\n                    self.recurseUrls($);\n                }\n                callback.apply(self, [null, $, data, headers, response]);\n            }\n        };\n        //Check if the parser is already initalised\n        if (!this.htmlparser) {\n            this.prepareHtmlparser();\n        }\n        this.htmlparser.parseComplete(data);\n    }\n};\n\n/**\n * Prepare htmlparser so that data can be parsed as chunks are received\n * (for use with getHtml and postHtml).\n *\n * @api public\n */\nJob.prototype.prepareHtmlparser = function () {\n    var self = this, $, htmlparser = require('htmlparser');\n    this.postParse = this.postParse || function () {};\n    this.htmlparser = new htmlparser.Parser(new htmlparser.DefaultHandler(function () {\n            self.htmlparser = null;\n            self.postParse.apply(this, arguments);\n        }, {verbose: true, ignoreWhitespace: true}\n    ));\n}\n\n/**\n * Gets all a~href links on the page based on the filter options.\n *\n * Default options are:\n *    resolve: true      - resolve relative links\n *    external: false    - include links to different hosts\n *    static: false      - include links to static resources (images, etc.)\n *    strip_anchor: true - links have their anchors stripped\n *    strip_query: false - strips query strings. Set this to 'smart' to strip\n *                         all queries unless they contain a page variable\n *                         such as 'page', 'offset', etc.\n *\n * @param {Function} $\n * @param {String} selector (optional - defaults to 'a')\n * @param {Object} options\n * @api public\n */\n Job.prototype.getLinks = function ($, selector, options) {\n    if (typeof selector === 'object' || typeof selector === 'undefined') {\n        options = selector || {};\n        selector = 'a';\n    }\n    options = utils.put({\n        resolve: true,\n        external: true,\n        static: false,\n        strip_anchor: true,\n        strip_query: false\n    }, options);\n\n    var current_url = this.last.url,\n        current_host = this.last.host.replace('www.',''),\n        resolve = require('url').resolve,\n        urlparse = require('url').parse,\n        urls = [];\n\n    $(selector).each('href', function (href) {\n        if (!href || href === '#' || href.substr(0, 11) === 'javascript:') return;\n\n        //Ignore links to static resource if static=false\n        if (!options.static && href.match(/\\.(jpg|jpeg|ico|css|gif|png|swf)$/i)) {\n            return;\n        }\n\n        //Strip off the anchor if strip_anchor=true\n        var anchor;\n        if (options.strip_anchor && (anchor = href.indexOf('#')) !== -1) {\n            href = href.substr(0, anchor);\n        }\n\n        //Resolve relative links if resolve=true\n        if (options.resolve) {\n            href = resolve(current_url, href);\n        }\n\n        //Cleanup common entities\n        href = href.replace(/\\s/g,'%20').replace(/&amp;/g,'&');\n\n        //Strip off query strings unless strip_query=false. If strip_query is 'smart' then\n        //let query strings through if they appear to link to separate pages of results\n        var query_str;\n        if (options.strip_query && (query_str = href.indexOf('?')) != -1) {\n            if (options.strip_query != 'smart' || (href.indexOf('page=') === -1\n                    && href.indexOf('offset=') === -1 && href.indexOf('start=') === -1)) {\n                href = href.substr(0, query_str);\n            }\n        }\n\n        //Prevent duplicates\n        if (urls.indexOf(href) != -1) {\n            return;\n        }\n\n        //Ignore external resources if external=false\n        if (!options.external) {\n            var host = urlparse(href).host;\n            if (host && current_host != host.replace('www.','')) {\n                return;\n            }\n        }\n\n        urls.push(href);\n    });\n    return urls;\n }\n\n/**\n * Recurses URLs based on a pattern. If no pattern is specified, URLs\n * that are children of the current URL are recursed.\n *\n * Specify two regex patterns for filtering links. Links will be recursed\n * if they match pattern1 and do not match pattern2.\n *        recurse: [pattern1, pattern2]\n *\n * @param {Function} $\n * @api public\n */\n Job.prototype.recurseUrls = function ($) {\n    var i, l, links = this.getLinks($, {\n        external: false,\n        strip_query: 'smart'\n    });\n\n    if ((l = links.length) === 0) {\n        return;\n    }\n\n    if (this.options.recurse instanceof Array) {\n        var pattern, n_pattern, p = this.options.recurse.length;\n        if (p >= 1) {\n            pattern = this.options.recurse[0];\n        }\n        if (p >= 2) {\n            n_pattern = this.options.recurse[1];\n        }\n\n        //Iterate over links on the page and recurse urls based on the patterns\n        for (i = 0; i < l; i++) {\n            if ((pattern && !links[i].match(pattern))\n                    || (n_pattern && links[i].match(n_pattern))) {\n                continue;\n            }\n            this.add(links[i]);\n        }\n    } else {\n        //Iterate over links on the page and recurse children of the current url\n        for (i = 0; i < l; i++) {\n            if (links[i].indexOf(this.last.url) === -1) {\n                continue;\n            }\n            this.add(links[i]);\n        }\n    }\n }\n\n/**\n * Augments a collection of DOM elements with some helpful methods.\n *\n * Methods:\n *     - filter(selector)\n *     - each(callback)  -OR-  each(attribute, callback)\n *     - first(), last(), even(), odd()\n *     - has(selector)\n *\n * @param {Array} collection\n * @api public\n */\nJob.prototype.bindToDomCollection = function (collection) {\n    var self = this, last = collection.length - 1, x;\n\n    var traverse = function (attrib, callback, condition) {\n        if (typeof attrib === 'function') {\n            callback = attrib;\n            for (x = 0; x <= last; x++) {\n                if (!condition()) continue;\n                self.bindToDomElement(collection[x]);\n                if (false === callback(collection[x])) break;\n            }\n        } else {\n            for (x = 0; x <= last; x++) {\n                if (!condition()) continue;\n                if (false === callback(collection[x].attribs[attrib])) break;\n            }\n        }\n    };\n\n    collection.each = function (attrib, callback) {\n        traverse(attrib, callback, function() { return true; });\n    };\n\n    //odd() includes the 1st, 3rd, etc..\n    collection.odd = function (attrib, callback) {\n        var i = 0;\n        traverse(attrib, callback, function() { return ++i % 2 === 1; });\n    };\n\n    //even() includes the 2nd, 4th, etc..\n    collection.even = function (attrib, callback) {\n        var i = 0;\n        traverse(attrib, callback, function() { return ++i % 2 === 0; });\n    };\n\n    collection.first = function (callback) {\n        var elem = collection[0];\n        self.bindToDomElement(elem);\n        if (callback) {\n            callback(elem);\n        }\n        return elem;\n    };\n\n    collection.last = function (callback) {\n        var elem = collection[last];\n        self.bindToDomElement(elem);\n        if (callback) {\n            callback(elem);\n        }\n        return elem;\n    };\n\n    collection.filter = function (select) {\n        return self.$(select, collection);\n    };\n\n    //Filter out elements in the collection that do not have a descendant that\n    //matches `select`\n    collection.has = function (select) {\n        var has = [];\n        for (x = 0; x <= last; x++) {\n            if (soupselect(collection[x], select).length > 0) {\n                has.push(collection[x]);\n            }\n        };\n        self.bindToDomCollection(has);\n        return has;\n    };\n};\n\n/**\n * Augments a DOM element with some helpful methods / getters.\n *\n * Getters:\n *     - innerHTML\n *     - rawtext - returns text immediately inside the selected element\n *     - rawfulltext - same as rawtext, but also includes text inside nested elems\n *     - text - rawtext but trimmed, BR's replaced with \\n, and entities decoded\n *     - fulltext\n *\n * Note: <br> and <br /> are replaced with \\n when using text and fulltext\n *\n * @param {Object} elem\n * @api public\n */\nJob.prototype.bindToDomElement = function (elem) {\n    var self = this, hasChildren, x, last;\n\n    if (elem.children && elem.children.length > 0) {\n        this.bindToDomCollection(elem.children);\n        last = elem.children.length - 1;\n        hasChildren = true;\n    }\n\n    var rawtext = function () {\n        var text = '';\n        if (hasChildren) {\n            for (x = 0; x <= last; x++) {\n                if (elem.children[x].type === 'text') {\n                    text += elem.children[x].data;\n                }\n            }\n        }\n        return text;\n    };\n\n    var text = function () {\n        var text = '';\n        if (hasChildren) {\n            for (x = 0; x <= last; x++) {\n                if (elem.children[x].type === 'text') {\n                    text += elem.children[x].data.trim();\n                } else if (elem.children[x].name === 'br') {\n                    text += '\\n';\n                }\n            }\n        }\n\n        text = self.filter(text).entityDecode();\n\n        return text;\n    };\n\n    var rawfulltext = function (elem) {\n        var text = '';\n        if (elem.children && elem.children.length > 0) {\n            for (var i = 0, l = elem.children.length; i < l; i++) {\n                if (elem.children[i].type === 'text') {\n                    text += elem.children[i].data;\n                } else if (elem.children[i].type === 'tag') {\n                    text += rawfulltext(elem.children[i]);\n                }\n            }\n        }\n        return text;\n    };\n\n    var fulltext = function (elem) {\n        var text = '';\n        if (elem.children && elem.children.length > 0) {\n            for (var i = 0, l = elem.children.length; i < l; i++) {\n                if (elem.children[i].type === 'text') {\n                    text += elem.children[i].data.trim();\n                } else if (elem.children[i].name === 'br') {\n                    text += '\\n';\n                } else if (elem.children[i].type === 'tag') {\n                    text += fulltext(elem.children[i]);\n                }\n            }\n        }\n\n        text = self.filter(text).entityDecode();\n\n        return text;\n    };\n\n    var innerHTML = function (elem) {\n        var text;\n\n        switch (elem.type) {\n        case 'tag':\n        case 'script':\n        case 'style':\n            text = '<' + elem.raw + '>';\n            //Skip if the tag is <short />\n            if (elem.raw[elem.raw.length-1] !== '/') {\n                if (elem.children && elem.children.length > 0) {\n                    for (var i = 0, l = elem.children.length; i < l; i++) {\n                        text += innerHTML(elem.children[i]);\n                    }\n                }\n                text += '</' + elem.name + '>';\n            }\n            break;\n\n        case 'comment':\n            text = '<!--' + elem.raw + '-->';\n            break;\n\n        case 'text':\n            text = elem.raw;\n            break;\n\n        default:\n            break;\n        }\n\n        return text;\n    };\n\n    //Define getters\n    elem.__defineGetter__('rawtext', rawtext);\n    elem.__defineGetter__('text', text);\n    elem.__defineGetter__('striptags', function () { return rawfulltext(elem); });\n    elem.__defineGetter__('fulltext', function () { return fulltext(elem); });\n    elem.__defineGetter__('innerHTML', function () { return innerHTML(elem); });\n};\n\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/lib/node.io/spawn.js":"/*!\n * node.io\n * Copyright(c) 2010 Chris O'Hara <cohara87@gmail.com>\n * MIT Licensed\n */\n\nvar child = require('child_process'),\n    Job = require('./job').JobProto;\n\n/**\n * Spawns a child process. `callback` takes (err, stdout, stderr).\n *\n * @param {String|Array} args\n * @param {String} stdin (optional)\n * @param {Function} callback\n * @api public\n */\nJob.prototype.spawn = function (args, stdin, callback) {\n    if (typeof stdin === 'function') {\n        callback = stdin;\n        stdin = undefined;\n    }\n\n    this.debug('Spawning \"' + args + '\"');\n\n    if (!(args instanceof Array)) {\n        args = args.split(' ');\n    }\n\n    var cmd = args.shift(),\n        stdout = '', stderr = '',\n        called = false,\n        proc = child.spawn(cmd, args, {cwd: process.cwd()});\n\n    proc.stdout.on('data', function (data) {\n        stdout += data;\n    });\n\n    proc.stderr.on('data', function (data) {\n        if (/^execvp\\(\\)/.test(data.asciiSlice(0, data.length))) {\n            callback('Failed to start child process.');\n            called = true;\n        } else {\n            stderr += data;\n        }\n    });\n\n    proc.on('exit', function () {\n        if (!called) {\n            callback(null, stdout, stderr);\n        }\n    });\n\n    if (stdin) {\n        proc.stdin.write(stdin);\n    }\n};\n\n/**\n * Executes a command. `callback` takes (err, stdout, stderr).\n *\n * @param {String|Array} cmd\n * @param {Function} callback\n * @api public\n */\nJob.prototype.exec = function (cmd, callback) {\n    this.debug('Spawning \"' + cmd + '\"');\n    var ops = {cwd: process.cwd()};\n    if (this.options.timeout) {\n        ops.timeout = this.options.timeout * 1000;\n    }\n    child.exec(cmd, ops, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/lib/node.io/process_master.js":"/*!\n * node.io\n * Copyright(c) 2010 Chris O'Hara <cohara87@gmail.com>\n * MIT Licensed\n */\n\nvar Processor = require('./processor').Processor;\n\n/**\n * Routes messages received from slaves or child processes.\n *\n * Messages takes the form [message, job, worker_id, ...]\n *\n * @param {Object} data\n * @api public\n */\nProcessor.prototype.handleWorkerMessage = function (data) {\n    var job = this.jobs[data[1]],\n        master = job.master;\n\n    switch (data[0]) {\n    case 'output': //['output', job, worker_id, output]\n        master.emit('output', data[3]);\n        break;\n\n    case 'pull': //['pull', job, worker_id]\n        job.pull_requests++;\n        if (!job.is_complete) {\n            master.emit('pullInput', data[2]);\n        }\n        break;\n\n    case 'err': //['err', job, err]\n        job.oncomplete(data[3]);\n        break;\n\n    case 'complete': //['complete', job, worker_id, output]\n        if (data[3]) {\n            master.emit('output', data[3]);\n        }\n        job.worker_complete[data[2]] = true;\n        break;\n\n    case 'add': //['add', job, worker_id, input, dont_flatten]\n        master.emit('addInput', data[3], data[4]);\n        break;\n    }\n}\n\n/**\n * Sets up job events to be handled by the master process.\n *\n * @param {Object} job\n * @param {Array} workers (optional)\n * @api public\n */\nProcessor.prototype.setupMasterEvents = function (job, workers) {\n    var self = this,\n        master = job.master,\n        worker_count = workers.length,\n        completeCheckInterval;\n\n    //Provide a method to check if workers are complete\n    var areWorkersComplete = function () {\n        if (job.pull_requests < worker_count) {\n            return false;\n        }\n        for (var i = 0; i < worker_count; i++) {\n            if (!job.worker_complete[i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    master.on('start', function () {\n        if (worker_count > 0) {\n\n            self.status('Running ' + worker_count + ' workers..', 'debug');\n\n            //Each worker is initially idle (complete) and requesting input\n            job.pull_requests = worker_count;\n\n            //Tell each worker to load the job - send `i` so that the worker\n            //can identify itself later\n            for (var i = 0; i < worker_count; i++) {\n                workers[i].send(['load', job.job_name, self.options, i]);\n            }\n\n        } else {\n            self.status('Running 1 worker..', 'debug');\n        }\n\n        //Pull the initial input\n        master.emit('pullInput');\n    });\n\n    master.on('pullInput', function (for_worker) {\n\n        //Determine how much input we need to pull\n        var pull = job.options.max * job.options.take;\n        if (worker_count > 0) {\n            //Pull more if we need have workers\n            pull = pull * job.options.worker_input_mult;\n            if (typeof for_worker === 'undefined') {\n                pull = pull * worker_count;\n            }\n        }\n\n        //Handle input limits when the `input` op is set\n        if (job.options.input && (job.input_offset + pull) > job.options.input) {\n            pull = Math.max(job.options.input - job.input_offset, 0);\n        }\n\n        //Callback for when input is received from job.input()\n        var handle_input = function (input) {\n            if (typeof input !== 'undefined' && input !== null && input !== false) {\n                master.emit('input', input, for_worker);\n            } else {\n\n                //No input? We might be done..\n\n                var isComplete = function () {\n                    //Check if any input was added dynamically\n                    if (job.input.length > 0) {\n                        job.is_complete = false;\n                        return false;\n                    }\n\n                    //Wait for workers or instances that are still working\n                    return worker_count > 0 ? areWorkersComplete() : job.instances <= 0;\n                };\n\n                //If we're not complete, check periodically\n                if (isComplete()) {\n                    master.emit('complete');\n                } else {\n                    completeCheckInterval = setInterval(function () {\n                        if (isComplete()) {\n                            clearInterval(completeCheckInterval);\n                            master.emit('complete');\n                        }\n                    }, 300);\n                }\n            }\n        };\n\n        if (pull > 0) {\n\n            //Incr the input offset\n            var offset = job.input_offset;\n            job.input_offset += pull;\n\n            //Allow job.input() to be sync and async\n            var input = job.obj.input(offset, pull, handle_input);\n            if (typeof input !== 'undefined') {\n                handle_input(input);\n            }\n\n        } else {\n            handle_input();\n        }\n    });\n\n    //Called when the master receives input from job.input();\n    master.on('input', function (input, for_worker) {\n        job.ready_to_request_input = true;\n        job.is_complete = false;\n\n        if (worker_count > 0) {\n\n            if (typeof for_worker !== 'undefined') {\n\n                //Send input to the worker that issued a pull request\n                workers[for_worker].send(['input', job.id, input]);\n                job.worker_complete[for_worker] = false;\n                job.pull_requests--;\n\n            } else {\n\n                //All workers need input, partition the input evenly\n                var partition = Math.ceil(input.length / worker_count);\n                for (var i = 0; i < worker_count; i++) {\n                    var worker_input = [];\n                    for (var k = 0; k < partition; k++) {\n                        if (input.length === 0) {\n                            break;\n                        }\n                        worker_input.push(input.shift());\n                    }\n                    if (worker_input.length) {\n                        workers[i].send(['input', job.id, worker_input]);\n                        job.pull_requests--;\n                    } else {\n                        job.worker_complete[i] = true;\n                    }\n                }\n            }\n\n        } else {\n\n            job.worker.emit('input', input);\n        }\n    });\n\n    //Allow jobs to dynamically add input outside of job.input() using job.add()\n    master.on('addInput', function (input, dont_flatten) {\n        if (!dont_flatten && input instanceof Array) {\n            for (var i = 0, l = input.length; i < l; i++) {\n                job.input.push(input[i]);\n            }\n        } else {\n            job.input.push(input);\n        }\n    });\n\n    master.on('output', function (output) {\n        //Call job.reduce() if it's defined, otherwise just call job.output()\n        if (typeof job.obj.reduce === 'function') {\n            var ret = job.obj.reduce.apply(job.obj, [output]);\n            if (typeof ret !== 'undefined' && ret !== null) {\n                job.obj.output.apply(job.obj, [ret]);\n            }\n        } else {\n            job.obj.output.apply(job.obj, [output]);\n        }\n    });\n\n    master.on('complete', function () {\n        //if (job.is_complete) return;\n        job.is_complete = true;\n\n        //Remove the job timeout if it was set\n        if (job.global_timeout) {\n            clearTimeout(job.global_timeout);\n        }\n\n        var oncomplete = function () {\n\n            //Output information about job running time, benchmarks, etc. if\n            //the `benchmark` op is set\n            var time;\n            if (job.options.benchmark) {\n                var mb_read, mb_written, MB = 1024 * 1024, now = new Date();\n\n                var round = function (val) {\n                    return Math.round(val * 1000) / 1000;\n                };\n\n                time = (now - job.start_time) / 1000;\n                mb_read = round(job.obj.getBytesRead() / MB);\n                mb_written = round(job.obj.getBytesWritten() / MB);\n\n                if (mb_read) {\n                    self.status(\n                        'Read ' + mb_read + 'MB (' + round(mb_read / time) + 'MB/s)'\n                    , 'ok');\n                }\n\n                if (mb_written) {\n                    self.status(\n                        'Wrote ' + mb_written + 'MB (' + round(mb_written / time) + 'MB/s)'\n                    , 'ok');\n                }\n            }\n\n            //Wait for output streams to drain, then we're done\n            job.obj.waitForOutputStreamDrains.apply(job.obj, [function () {\n                self.status('Job complete' + (time ? 'd in ' + time + 's' : ''), 'ok');\n                var oncomplete = job.oncomplete;\n                self.jobs[job.id] = null;\n                oncomplete();\n            }]);\n        };\n\n        //Call job.complete() if it's defined\n        if (typeof job.obj.complete === 'function') {\n            if (job.obj.complete.apply(job.obj, [oncomplete])) {\n                oncomplete();\n            }\n        } else {\n            oncomplete();\n        }\n\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/lib/node.io/process_worker.js":"/*!\n * node.io\n * Copyright(c) 2010 Chris O'Hara <cohara87@gmail.com>\n * MIT Licensed\n */\n\nvar Processor = require('./processor').Processor,\n    crc32 = require('./utils').crc32,\n    JobClass = require('./job').JobClass;\n\n/**\n * Routes messages received from the master process.\n *\n * Messages takes the form [message, job, ...]\n *\n * @param {Object} data\n * @api public\n */\nProcessor.prototype.handleMasterMessage = function (data) {\n    var job = this.jobs[data[1]], self = this;\n\n    switch (data[0]) {\n    case 'load': //['load', job, options, worker_id]\n        this.id = data[3];\n        this.options = data[2];\n        var load = !isSlave ? this.loadJob : this.slaveLoadJob;\n        load.call(this, data[1], this.options, function (err, job_name, job_obj) {\n            if (err) {\n                self.exit(err);\n            } else {\n                self.startJob.call(self, job_name, job_obj);\n            }\n        });\n        break;\n\n    case 'input': //['input', job, input]\n        if (!job) {\n            //The job might not have compiled yet..\n            setTimeout(function () {\n                self.handleMasterMessage(data);\n            }, 100);\n            return;\n        }\n\n        job.worker.emit('input', data[2]);\n        break;\n\n    case 'exit': //['exit']\n        process.exit(1);\n        break;\n    }\n};\n\n/**\n * Sets up job events to be handled by the slave or child process.\n *\n * @param {Object} job\n * @param {Object} master (optional)\n * @api public\n */\nProcessor.prototype.setupWorkerEvents = function (job, master) {\n    var self = this,\n        worker = job.worker,\n        isMaster = typeof master === 'undefined';\n\n    worker.on('input', function (input) {\n        job.ready_to_request_input = true;\n        job.is_complete = false;\n\n        //Add the input that was received\n        for (var i = 0, l = input.length; i < l; i++) {\n            job.input.push(input[i]);\n        }\n\n        //Spawn instances to handle the input\n        if (job.input.length > 0) {\n            worker.emit('process');\n        }\n    });\n\n    worker.on('pullInput', function () {\n        master.send(['pull', job.id, self.id]);\n    });\n\n    worker.on('process', function () {\n        utils.tick(function () {\n            if (job.is_complete) return;\n\n            if (job.ready_to_request_input && job.input.length < (job.options.max * job.options.take * job.options.worker_input_mult)) {\n\n                //We already have input, but pull some more for continuity\n                job.ready_to_request_input = false;\n                if (isMaster) {\n                    job.master.emit('pullInput');\n                } else {\n                    worker.emit('pullInput');\n                }\n\n            } else if (!isMaster && job.input.length === 0) {\n\n                //We might be done, although hanging instances might add some more input\n                //using add(), so add another check on the next tick\n                utils.tick(function () {\n                    if (job.input.length === 0 && !job.is_complete) {\n                        worker.emit('complete');\n                    }\n                });\n            }\n\n            //Make sure we don't spawn more instances than specified in the `max` op\n            var num = job.options.max - job.instances;\n            while (job.input.length && num--) {\n                worker.emit('spawn');\n            }\n        });\n    });\n\n    //Create a new job instance\n    var createInstance = function () {\n\n        var instance = new JobClass(job.options, {});\n\n        //We only need a subset of the methods\n        instance.run = job.obj.run;\n        instance.fail = job.obj.fail;\n        instance.debug = job.obj.debug;\n        instance.status = job.obj.status;\n        instance.exit = job.obj.exit;\n        instance.add = job.obj.add;\n\n        //Called when a job wants to dynamically add input outside of job.input() using job.add()\n        instance.add = function (input, dont_flatten) {\n            if (!isMaster) {\n                //Send the added input back to the master so that it is evenly distributed among workers\n                master.send(['add', job.id, input, dont_flatten]);\n            } else {\n                job.master.emit('addInput', input, dont_flatten);\n            }\n        }\n\n        //Handle job output and continue processing\n        instance.emit = function (result) {\n            worker.emit('output', result);\n            instance.cancel_timeout();\n            instance.isComplete = true;\n\n            var emit = function () {\n                job.instances--;\n\n                //Reuse the instance later on\n                job.instance_pool.push(instance);\n\n                worker.emit('process');\n            };\n\n            if (job.options.wait) {\n                setTimeout(emit, job.options.wait * 1000);\n            } else {\n                emit();\n            }\n        };\n\n        //exit() is handled by the master\n        if (!isMaster) {\n            instance.exit = function (err) {\n                master.send(['err', job.id, err]);\n            };\n        }\n\n        //skip() is an alias for emitting an undefined result\n        instance.skip = instance.emit;\n\n        //If no custom fail() method is provided, fail() === skip()\n        if (typeof instance.fail !== 'function') {\n            instance.fail = instance.emit;\n        }\n\n        //Handle retries\n        instance.retry = function () {\n            instance.finish(function () {\n\n                //Handle the case where only a certain amount of retries is permitted\n                if (job.options.retries !== false) {\n                    var input_hash = utils.crc32(JSON.stringify(instance.assigned_input));\n                    if (typeof job.retry_hashes[input_hash] === 'undefined') {\n                        job.retry_hashes[input_hash] = 1;\n                    } else {\n                        job.retry_hashes[input_hash]++;\n                    }\n                }\n\n                if (job.options.retries !== false && job.retry_hashes[input_hash] > job.options.retries) {\n\n                    var ret = instance.fail(instance.assigned_input, 'retry');\n                    if (typeof ret !== 'undefined' && ret !== null) {\n                        instance.emit(ret);\n                    };\n\n                } else {\n\n                    job.instances--;\n\n                    //Re-add the assigned input\n                    if (instance.assigned_input instanceof Array) {\n                        for (var i = 0, l = instance.assigned_input.length; i < l; i++) {\n                            job.input.push(instance.assigned_input[i]);\n                        }\n                    } else {\n                        job.input.push(instance.assigned_input);\n                    }\n\n                    //Reuse the instance later on, only if there's more retry (see bug #148)\n                    job.instance_pool.push(instance);\n                }\n\n                //Continue processing\n                worker.emit('process');\n            });\n        };\n\n        return instance;\n    };\n\n    worker.on('spawn', function () {\n\n        //Try and reuse instances where possible\n        var instance;\n        if (job.instance_pool.length > 0) {\n            instance = job.instance_pool.shift();\n            instance.reset();\n        } else {\n            instance = createInstance();\n        }\n\n        //Assign some input to the instance\n        var num = job.options.take;\n        while (job.input.length > 0 && num--) {\n            instance.assigned_input.push(job.input.shift());\n        }\n        if (job.options.take === 1 && instance.assigned_input.length === 1) {\n            instance.assigned_input = instance.assigned_input[0];\n        }\n\n        //Set a timeout for run() if the `timeout` op is set\n        if (job.options.timeout) {\n            instance.timeout = setTimeout(function () {\n                instance.fail_with('timeout');\n            }, job.options.timeout * 1000);\n        }\n\n        try {\n            //Start the instance\n            var ret = instance.run(instance.assigned_input);\n            if (typeof ret !== 'undefined' && ret !== null) {\n                instance.emit(ret);\n            }\n        } catch (err) {\n            instance.fail_with(err);\n        }\n\n        job.instances++;\n    });\n\n    worker.on('output', function (result) {\n\n        if (typeof result !== 'undefined' && result !== null) {\n            if (job.options.flatten && result instanceof Array) {\n                for (var i = 0, l = result.length; i < l; i++) {\n                    job.output.push(result[i]);\n                }\n            } else {\n                job.output.push(result);\n            }\n\n            job.output_count++;\n        }\n\n        if (job.output.length === 0) {\n            return;\n        }\n\n        //If we're not the master, try and minimise communication frequency by\n        //outputting only when output >= max\n        if (isMaster || job.output_count >= job.options.max) {\n            if (!isMaster) {\n                //Send the output to the master for handling\n                master.send(['output', job.id, self.id, job.output]);\n            } else {\n                job.master.emit('output', job.output);\n            }\n\n            job.output = [];\n            job.output_count = 0;\n        }\n    });\n\n    worker.on('complete', function () {\n        job.is_complete = true;\n\n        //Attach any final output to the message\n        master.send(['complete', job.id, self.id, job.output]);\n\n        job.output = [];\n        job.output_count = 0;\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/lib/node.io/process_slave.js":"/*!\n * node.io\n * Copyright(c) 2010 Chris O'Hara <cohara87@gmail.com>\n * MIT Licensed\n */\n\nvar Processor = require('./processor').Processor,\n    crc32 = require('./utils').crc32;\n\n/**\n * Initialises the slave.\n *\n * @api public\n */\nProcessor.prototype.slaveInit = function () {\n    //TODO\n};\n\n/**\n * Used by the slave to load a job.\n *\n * @param {String} job\n * @param {Function} callback\n * @api public\n */\nProcessor.prototype.slaveLoadJob = function (job, callback) {\n    //TODO\n};\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/lib/node.io/interfaces/cli.js":"/*!\n * node.io\n * Copyright(c) 2010 Chris O'Hara <cohara87@gmail.com>\n * MIT Licensed\n */\n\nvar fs = require('fs'),\n    cwd = process.cwd(),\n    processor = require('../processor'),\n    path = require('path'),\n    utils = require('../utils');\n\nvar usage = ''\n  + '\\x1b[1mUsage\\x1b[0m: node.io [OPTIONS] <JOB_FILE> [JOB_ARGS]\\n'\n  + '\\n'\n  + '\\x1b[1mExample\\x1b[0m: node.io -s resolve < domains.txt\\n'\n  + '\\n'\n  + '\\x1b[1mOptions\\x1b[0m:\\n'\n  + '  -s, --silent           Hide console status messages\\n'\n  + '  -i, --input <FILE>     Read input from FILE\\n'\n  + '  -o, --output <FILE>    Write output to FILE\\n'\n  + '  -t, --timeout <TIME>   Set a timeout for the operation (in seconds)\\n'\n//  + '  -f, --fork [NUM]       Fork NUM workers. If NUM isn\\'t specified, a\\n'\n//  + '                         process is spawned for each CPU core\\n'\n  + '  -u, --unpack <PASS>    Unpack a job using the specified password\\n'\n  + '  -d, --daemon           Daemonize the process (requires daemon.node)\\n'\n  + '      --spoof            Spoof request headers\\n'\n  + '  -m, --max              Set the maximum concurrent requests\\n'\n  + '  -b, --benchmark        Benchmark the operation\\n'\n  + '  -g, --debug            Debug the operation\\n'\n  + '  -v, --version          Display the current version\\n'\n  + '  -h, --help             Display help information\\n'\n  + '  -c, --compiler         Set an alternate compiler to use\\n'\n  ;\n\n/**\n * exports.cli\n *\n * Start node.io with the specified arguments.\n *\n * @param {Array} args\n * @api public\n */\nexports.cli = function (args, exit) {\n    exit = exit || function (msg, is_error) {\n        utils.status[is_error ? 'error' : 'info'](msg);\n        process.exit(1);\n    };\n\n    var job_path, job_modified = false,\n        input, output, filter,\n        daemonize, daemon_arg,\n        options = {extend:{}};\n\n    if (!args.length) {\n        exit(usage);\n    }\n\n    while (args.length) {\n        arg = args.shift();\n        switch (arg) {\n        case '-i':\n        case '--input':\n            input = args.shift();\n            job_modified = true;\n            break;\n        case '-o':\n        case '--output':\n            output = args.shift();\n            job_modified = true;\n            break;\n        case '-s':\n        case '--silent':\n            options.silent = true;\n            break;\n        case '-b':\n        case '--benchmark':\n            options.benchmark = true;\n            break;\n        case '-g':\n        case '--debug':\n            options.debug = true;\n            break;\n        case '--spoof':\n            options.spoof = true;\n            break;\n        case '-m':\n        case '--max':\n            options.max = args.shift();\n            break;\n        case '-t':\n        case '--timeout':\n            options.global_timeout = args.shift();\n            break;\n        case '-f':\n        case '--fork':\n            if (args.length && args[0].match(/^[0-9]+$/)) {\n                options.fork = args.shift();\n            } else {\n                options.fork = true;\n            }\n            break;\n        case '-h':\n        case '--help':\n            exit(usage);\n            break;\n        case '-v':\n        case '--version':\n            var packagejson = JSON.parse(fs.readFileSync(__dirname + '/../../../package.json', 'utf8'));\n            exit('v' + packagejson.version);\n            break;\n        case '-d':\n        case '--daemon':\n            if (args.length && args[0][0] !== '-') {\n                daemon_arg = args.shift();\n            }\n            daemonize = true;\n            break;\n        case '-u':\n        case '--unpack':\n            options.unpack = args.shift();\n            break;\n        case '-c':\n        case '--compiler':\n            options.compiler = args.shift();\n            break;\n        default:\n            job_path = arg;\n            if (args.length) {\n                options.args = args;\n                options.arg1 = args[0];\n                args = [];\n            }\n            break;\n        }\n    }\n\n    if (job_modified) {\n        options.extend = {\n            methods: {}\n        };\n        if (output) options.extend.methods.output = output;\n        if (input) options.extend.methods.input = input;\n        if (filter) options.extend.methods.filter = filter;\n    }\n\n    if (daemonize) {\n        utils.daemonize(daemon_arg, function () {\n            processor.start(job_path, options);\n        });\n    } else {\n        processor.start(job_path, options);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/lib/node.io/interfaces/web.js":"/*!\r\n * node.io\r\n * Copyright(c) 2010 Chris O'Hara <cohara87@gmail.com>\r\n * MIT Licensed\r\n */\r\n\r\nvar processor = require('../processor'),\r\n    fs = require('fs'),\r\n    path = require('path'),\r\n    http = require('http'),\r\n    utils = require('../utils'),\r\n    querystring = require('querystring');\r\n\r\nvar usage = ''\r\n  + '\\x1b[1mUsage\\x1b[0m: node.io-web [OPTIONS] <JOB_DIR>\\n'\r\n  + '\\n'\r\n  + 'Note: <JOB_DIR> defaults to ~/.node_modules\\n'\r\n  + '\\n'\r\n  + '\\x1b[1mOptions\\x1b[0m:\\n'\r\n  + '  -p, --port [PORT]      Port to listen on. Default is 8080\\n'\r\n  + '  -d, --daemon           Daemonize the process\\n'\r\n  + '  -v, --version          Display the current version\\n'\r\n  + '  -h, --help             Display help information\\n\\n'\r\n  + '\\x1b[1mUsage 1\\x1b[0m:\\n    1. Visit http://localhost:<PORT>/ for a web interface\\n\\n'\r\n  + '\\x1b[1mUsage 2\\x1b[0m: \\n    1. `/jobs` has a JSON representation of available jobs\\n'\r\n  + '    2. `/run?job=<JOB>&input=<INPUT>` where input is \\\\r\\\\n separated'\r\n  ;\r\n\r\n/**\r\n * exports.web\r\n *\r\n * Run node.io through a web interface.\r\n *\r\n * @param {Array} args\r\n * @api public\r\n */\r\nexports.web = function (args, exit) {\r\n\r\n    exit = exit || function (msg, is_error) {\r\n        utils.status[is_error ? 'error' : 'info'](msg);\r\n        process.exit(1);\r\n    };\r\n\r\n    var port = 8080, daemonize = false, daemon_arg;\r\n\r\n    var module_dir;\r\n    for (var i = 0, l = require.paths.length; i < l; i++) {\r\n        if (require.paths[i].indexOf('.node_modules') >= 0) {\r\n            module_dir = require.paths[i];\r\n            break;\r\n        }\r\n    }\r\n\r\n    while (args.length) {\r\n        arg = args.shift();\r\n        switch (arg) {\r\n        case '-p':\r\n        case '--port':\r\n            port = args.shift();\r\n            break;\r\n        case '-h':\r\n        case '--help':\r\n            exit(usage);\r\n            break;\r\n        case '-v':\r\n        case '--version':\r\n            var packagejson = JSON.parse(fs.readFileSync(__dirname + '/../../../package.json', 'utf8'));\r\n            exit('v' + packagejson.version);\r\n            break;\r\n        case '-d':\r\n        case '--daemon':\r\n            if (args.length && args[0][0] !== '-') {\r\n                daemon_arg = args.shift();\r\n            }\r\n            daemonize = true;\r\n            break;\r\n        default:\r\n            module_dir = arg;\r\n            break;\r\n        }\r\n    }\r\n\r\n    //Check that module_dir exists and has some jobs in it\r\n    try {\r\n        var files = fs.readdirSync(module_dir);\r\n        if (files.length === 0) throw new Error();\r\n    } catch (e) {\r\n        exit('No jobs found in ' + module_dir, true);\r\n    }\r\n\r\n    var start_job = function (params, res) {\r\n        if (typeof params.job === 'undefined') {\r\n            res.writeHead(400);\r\n            res.end();\r\n            return;\r\n        }\r\n\r\n        if (params.job.indexOf('../') >= 0) {\r\n            res.writeHead(403);\r\n            res.end();\r\n            return;\r\n        }\r\n\r\n        var methods = {\r\n            output: function (lines) {\r\n                lines.forEach(function (line) {\r\n                    res.write(line + '<br />');\r\n                });\r\n            }\r\n        };\r\n\r\n        if (params.input && params.input != '') {\r\n            methods.input = params.input.split(params.sep || '\\r\\n');\r\n        }\r\n\r\n        var proc_options = {\r\n            extend: {\r\n                methods: methods\r\n            },\r\n            debug: !!params.debug,\r\n            silent: !params.debug,\r\n            global_timeout: params.timeout,\r\n            args: params.args ? params.args.split(' ') : null\r\n        };\r\n\r\n        processor.Processor.prototype.status = function (msg, type) {\r\n            switch (type) {\r\n            case 'debug':\r\n                msg = '<font color=\"blue\">DEBUG</font>: ' + msg;\r\n                break;\r\n\r\n            case 'error':\r\n            case 'fatal':\r\n                msg = '<font color=\"red\">ERROR</font>: ' + msg;\r\n                break;\r\n\r\n            case 'ok':\r\n                msg = '<font color=\"green\">OK</font>: ' + msg;\r\n                break;\r\n\r\n            case 'bold':\r\n                msg = '<strong>' + msg + '</strong>';\r\n                break;\r\n            default:\r\n                msg = '<font color=\"orange\">INFO</font>: ' + msg;\r\n                break;\r\n            }\r\n            res.write(msg + '<br />');\r\n        };\r\n\r\n        console.log('Running job \"' + params.job + '\"');\r\n\r\n        processor.start(module_dir + '/' + params.job, proc_options, function (err) {\r\n            res.end();\r\n        });\r\n    };\r\n\r\n    var interface_a = ''\r\n    + '<!DOCTYPE html><head><title>node.io</title></head><body>'\r\n    + '<script type=\"text/javascript\" src=\"http://www.google.com/jsapi\"></script><script type=\"text/javascript\">google.load(\"jquery\", \"1.4.4\");</script><style type=\"text/css\">'\r\n    + '.radio, .checkbox{vertical-align:middle;margin:0px;padding:0px;}.radio-item,.checkbox-item{margin-top:5px;float:left;}.radio-item label,.checkbox-item label{margin-left:5px;}.radio-item br,.checkbox-item br{clear:left;}'\r\n    + '.submit-button,.submit-reset,.submit-print{margin:0px;overflow:visible;padding:1px 6px;width:auto;}.submit-button::-moz-focus-inner,.submit-reset::-moz-focus-inner{border:0px;padding:1px 6px;}.header{margin:0px;}'\r\n    + '.header-group{background:#f5f5f5;border-bottom:1px solid #ccc;padding:12px;clear:both;}.header-group-b{background:#f5f5f5;border-bottom:1px solid #ccc;padding:7px 12px;clear:both;}.label{width: 150px;margin-bottom:6px;'\r\n    + 'display:inline-block;width:137px !important;}.label-left{float:left;display:inline-block;text-align:left;padding:3px;width:137px !important;}.label-right{float:left;display:inline-block;text-align:right;margin-right:6px;'\r\n    + 'margin-bottom:6px;width:137px !important;padding:3px;}.section,.section-closed{list-style:none;list-style-position:outside;margin:0px;padding:0px;position:relative;zoom:1;}.input{display:inline-block;}.line{clear:both;'\r\n    + 'padding:10px;margin:0px;display:inline-block;width:97%;width:-moz-available;position:relative;}.single-column .clearfix{display:inline-block;}.single-column .clearfix{display:block;}.all{list-style:none;'\r\n    + 'list-style-position:outside;margin:0px;width:650px;color:#000000 !important;font-family:Arial;font-size:12px;}.advanced{display: none;}'\r\n    + '</style><form action=\"/run\" method=\"post\"><div class=\"all\"><ul class=\"section\"><li class=\"input-wide\"><div class=\"header-group\"><h2 class=\"header\">Node.io</h2></div></li>'\r\n    + '<li class=\"line\"><label class=\"label-left\">Job</label><div class=\"input\">'\r\n    ;\r\n\r\n    var interface_b = ''\r\n    + '<span class=\"clearfix\"></span></div></li>'\r\n    + '<li class=\"line\"><label class=\"label-left\">Arguments:</label><div class=\"input\"><input type=\"text\" class=\"textbox\" name=\"args\" size=\"64\" /></div></li>'\r\n    + '<li class=\"line\"><label class=\"label-left\">Input</label><div class=\"input\"><textarea class=\"textarea\" name=\"input\" cols=\"50\" rows=\"8\"></textarea></div></li>'\r\n    + '<li class=\"line\"><label class=\"label-left\">Advanced Options</label><div class=\"input\"><input type=\"checkbox\" onclick=\"$(\\'.advanced\\').toggle()\" /></div></li>'\r\n    + '<li class=\"line advanced\"><label class=\"label-left\">Timeout: (s)</label><div class=\"input\"><input type=\"text\" class=\"textbox\" name=\"timeout\" size=\"20\" /></div></li>'\r\n    + '<li class=\"line advanced\"><label class=\"label-left\">Debug</label><div class=\"input\"><div class=\"single-column\"><span class=\"checkbox-item\" style=\"clear:left;\"><input type=\"checkbox\" class=\"checkbox\" name=\"debug\" value=\"1\" /></div></div></li>'\r\n    + '<li class=\"line\"><div class=\"input-wide\"><div style=\"margin-left:143px\" class=\"buttons-wrapper\"><button type=\"submit\" class=\"submit-button\">Run</button></div></div></li></ul></div></form>'\r\n    ;\r\n\r\n    var handle = function (req, res) {\r\n        if (req.url === '/') {\r\n            res.writeHead(200, {'Content-Type': 'text/html'});\r\n            utils.getFiles(module_dir, function(files) {\r\n                res.write(interface_a);\r\n                files.sort();\r\n                var file_name;\r\n                files.forEach(function (file) {\r\n                    //Make the filename pretty... my_job.js => My job\r\n                    if (file.indexOf('.js') >= 0) {\r\n                        file_name = path.basename(file, '.js')\r\n                    } else if (file.indexOf('.coffee') >= 0) {\r\n                        file_name = path.basename(file, '.coffee')\r\n                    } else {\r\n                        file_name = file;\r\n                    }\r\n                    file_name = file_name.replace('_', ' ');\r\n                    file_name = file_name.substr(0, 1).toUpperCase() + file_name.substr(1);\r\n\r\n                    //Output the job radio button\r\n                    res.write('<span class=\"radio-item\" style=\"clear:left;margin-left:4px;\"><input type=\"radio\" class=\"radio\" name=\"job\" value=\"' + file + '\" /><label>' + file_name + '</label></span>');\r\n                })\r\n                res.end(interface_b);\r\n            });\r\n        } else if (req.url === '/jobs') {\r\n            res.writeHead(200, {'Content-Type': 'text/html'});\r\n            utils.getFiles(module_dir, function(files) {\r\n                res.end(JSON.stringify(files));\r\n            });\r\n        } else if (req.url.indexOf('/run') === 0) {\r\n            res.writeHead(200, {'Content-Type': 'text/html'});\r\n            var params;\r\n            if (req.method.toUpperCase() === 'GET') {\r\n                params = querystring.parse(req.url.substr(5));\r\n                start_job(params, res);\r\n            } else {\r\n                var data = '';\r\n                req.setEncoding('utf8');\r\n                req.addListener('data', function(chunk) { data += chunk; });\r\n                req.addListener('end', function() {\r\n                    params = querystring.parse(data);\r\n                    start_job(params, res);\r\n                });\r\n            }\r\n        } else {\r\n            res.writeHead(404);\r\n            res.end();\r\n        }\r\n    };\r\n\r\n    var start_server = function () {\r\n        http.createServer(handle).listen(port);\r\n        console.log('\\x1B[33mINFO\\x1B[0m: Listening on port ' + port + '\\n');\r\n    };\r\n\r\n    if (daemonize) {\r\n        utils.daemonize(daemon_arg, function () {\r\n            start_server();\r\n        });\r\n    } else {\r\n        start_server();\r\n    }\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/addinput.js":"var nodeio = require('./');\n\nvar page_numbers_on_page = {\n    1: [ '1', '2', '3', '4' ]\n  , 2: [ '1', '2', '3', '4' ]\n  , 3: [ '2', '3', '4', '5' ]\n  , 4: [ '3', '4', '5', '6' ]\n  , 5: [ '5', '6', '7', '8' ]\n  , 6: [ '6', '7', '8', '9' ]\n  , 7: [ '6', '7', '8', '9' ]\n  , 8: [ '6', '7', '8', '9' ]\n  , 9: [ '6', '7', '8', '9' ]\n};\n\nvar seen_pages = { 1: true };\n\nexports.Job = new nodeio.Job({}, {\n    input: ['1']\n  , run: function (page) {\n        var self = this;\n        page_numbers_on_page[page].forEach(function (page) {\n            if (!(page in seen_pages)) {\n                self.add(page);\n                seen_pages[page] = true;\n            }\n        });\n        this.emit('Loaded page ' + page);\n    }\n});\n\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/index.js":"exports = module.exports = require('./lib/node.io');","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/builtin/digest.js":"(function() {\n  var Digest, crypto, nodeio, usage;\n  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor;\n    child.__super__ = parent.prototype;\n    return child;\n  };\n  usage = 'This module calculates the hash/checksum of each element of input.\\nAvailable hashes are md5, crc32, sha1, sha256, sha512, ...\\n\\n   1. To find the MD5 hash of a string\\n       $ echo \"this is a string\" | node.io digest md5\\n          => b37e16c620c055cf8207b999e3270e9b';\n  nodeio = require('node.io');\n  crypto = require('crypto');\n  Digest = (function() {\n    __extends(Digest, nodeio.JobClass);\n    function Digest() {\n      Digest.__super__.constructor.apply(this, arguments);\n    }\n    Digest.prototype.init = function() {\n      if (this.options.args.length === 0 || this.options.args[0] === 'help') {\n        this.status(usage);\n        return this.exit();\n      }\n    };\n    Digest.prototype.run = function(input) {\n      var hash;\n      hash = this.options.args[0];\n      switch (hash) {\n        case 'crc32':\n          return this.emit(crc32(input));\n        default:\n          return this.emit(crypto.createHash(hash).update(input).digest('hex'));\n      }\n    };\n    return Digest;\n  })();\n  this[\"class\"] = Digest;\n  this.job = new Digest();\n  \nfunction crc32 (str) {\n    var crc32tab = [\n        0x00000000, 0x77073096, 0xee0e612c, 0x990951ba,\n        0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\n        0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,\n        0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\n        0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,\n        0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n        0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec,\n        0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\n        0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,\n        0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n        0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940,\n        0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n        0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116,\n        0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\n        0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n        0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\n        0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a,\n        0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n        0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818,\n        0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n        0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,\n        0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\n        0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c,\n        0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n        0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,\n        0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\n        0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,\n        0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\n        0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086,\n        0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n        0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4,\n        0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\n        0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,\n        0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\n        0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,\n        0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n        0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe,\n        0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\n        0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,\n        0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n        0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252,\n        0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n        0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60,\n        0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\n        0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n        0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\n        0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04,\n        0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n        0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a,\n        0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n        0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,\n        0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\n        0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e,\n        0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n        0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,\n        0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\n        0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,\n        0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\n        0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0,\n        0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n        0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6,\n        0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\n        0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,\n        0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d\n    ];\n\n    var crc = ~0;\n    for (var i = 0; i < str.length; i++) {\n        crc = (crc >>> 8) ^ crc32tab[(crc ^ str.charCodeAt(i)) & 0xff];\n    }\n\n    crc = (~crc >>> 16) & 0x7fff;\n    return crc === 0 ? 1 : crc;\n}\n;\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/builtin/eval.js":"(function() {\n  var EvalExp, nodeio, usage;\n  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor;\n    child.__super__ = parent.prototype;\n    return child;\n  };\n  usage = 'This module evaluates an expression on each line of input and emits the result (unless the result is null)\\n\\n   1. To convert a TSV (tab separated file) to CSV\\n       $ cat data.tsv | node.io -s eval \"input.split(\\'\\t\\').join(\\',\\')\" > data.csv\\n\\n   2. To remove empty lines from text.txt\\n       $ cat text.txt | node.io -s eval \"input.length ? input : null\" > modified.txt';\n  nodeio = require('node.io');\n  EvalExp = (function() {\n    __extends(EvalExp, nodeio.JobClass);\n    function EvalExp() {\n      EvalExp.__super__.constructor.apply(this, arguments);\n    }\n    EvalExp.prototype.init = function() {\n      if (this.options.args.length === 0) {\n        this.exit('Please enter an expression, e.g. `node.io eval \"input.length\"`');\n      }\n      if (this.options.args[0] === 'help') {\n        this.status(usage);\n        return this.exit;\n      }\n    };\n    EvalExp.prototype.run = function(input) {\n      var result;\n      result = eval(this.options.args[0]);\n      if (result != null) {\n        return this.emit(result);\n      } else {\n        return this.skip();\n      }\n    };\n    return EvalExp;\n  })();\n  this[\"class\"] = EvalExp;\n  this.job = new EvalExp();\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/builtin/pagerank.js":"(function() {\n  var Pagerank, UsageDetails, nodeio, options, usage,\n    __hasProp = Object.prototype.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };\n\n  usage = 'This module checks a URL\\'s Google pagerank (rate limits apply)\\n\\n   1. To find the pagerank of a URL:\\n       $ echo \"mastercard.com\" | node.io -s pagerank\\n          => mastercard.com,7';\n\n  nodeio = require('node.io');\n\n  options = {\n    timeout: 10,\n    retries: 3\n  };\n\n  Pagerank = (function(_super) {\n\n    __extends(Pagerank, _super);\n\n    function Pagerank() {\n      Pagerank.__super__.constructor.apply(this, arguments);\n    }\n\n    Pagerank.prototype.run = function(input) {\n      var ch, url,\n        _this = this;\n      url = input;\n      if (url.indexOf('http://') === -1) url = 'http://' + url;\n      ch = '6' + GoogleCH(strord('info:' + url));\n      return this.get('http://toolbarqueries.google.com/tbr?client=navclient-auto&ch=' + ch + '&features=Rank&q=info:' + encodeURIComponent(url), function(err, data) {\n        var match;\n        if (err != null) return _this.retry();\n        data = data || '';\n        if (match = data.match(/Rank_1:1:(10|[0-9])/)) {\n          return _this.emit(input + ',' + match[1]);\n        } else {\n          return _this.emit(input + ',');\n        }\n      });\n    };\n\n    return Pagerank;\n\n  })(nodeio.JobClass);\n\n  UsageDetails = (function(_super) {\n\n    __extends(UsageDetails, _super);\n\n    function UsageDetails() {\n      UsageDetails.__super__.constructor.apply(this, arguments);\n    }\n\n    UsageDetails.prototype.input = function() {\n      this.status(usage);\n      return this.exit();\n    };\n\n    return UsageDetails;\n\n  })(nodeio.JobClass);\n\n  this[\"class\"] = Pagerank;\n\n  this.job = {\n    pagerank: new Pagerank(options),\n    help: new UsageDetails()\n  };\n\n  \n// BEGIN CODE FOR GENERATING GOOGLE PAGERANK CHECKSUMS\n//----------------------------------------------------------------------------------------------\nfunction zF(a,b) {\n    var z = parseInt(80000000,16);\n    if (z & a) {\n        a = a>>1;\n        a &=~z;\n        a |= 0x40000000;\n        a = a>>(b-1);\n    } else {\n        a = a>>b;\n    }\n    return(a);\n}\nfunction mix(a,b,c) {\n    a-=b; a-=c; a^=(zF(c,13));\n    b-=c; b-=a; b^=(a<<8);\n    c-=a; c-=b; c^=(zF(b,13));\n    a-=b; a-=c; a^=(zF(c,12));\n    b-=c; b-=a; b^=(a<<16);\n    c-=a; c-=b; c^=(zF(b,5));\n    a-=b; a-=c; a^=(zF(c,3));\n    b-=c; b-=a; b^=(a<<10);\n    c-=a; c-=b; c^=(zF(b,15));\n    return (new Array((a),(b),(c)));\n}\nfunction GoogleCH(url,length) {\n    if(arguments.length == 1) length=url.length;\n    var a=0x9E3779B9, b=0x9E3779B9, c=0xE6359A60, k=0, len=length, mx=new Array();\n    while(len>=12) {\n        a+=(url[k+0]+(url[k+1]<<8)+(url[k+2]<<16)+(url[k+3]<<24));\n        b+=(url[k+4]+(url[k+5]<<8)+(url[k+6]<<16)+(url[k+7]<<24));\n        c+=(url[k+8]+(url[k+9]<<8)+(url[k+10]<<16)+(url[k+11]<<24));\n        mx=mix(a,b,c);\n        a=mx[0]; b=mx[1]; c=mx[2];\n        k+=12; len-=12;\n    }\n    c+=length;\n    switch(len) {\n        case 11: c+=url[k+10]<<24;\n        case 10: c+=url[k+9]<<16;\n        case 9:c+=url[k+8]<<8;\n        case 8:b+=(url[k+7]<<24);\n        case 7:b+=(url[k+6]<<16);\n        case 6:b+=(url[k+5]<<8);\n        case 5:b+=(url[k+4]);\n        case 4:a+=(url[k+3]<<24);\n        case 3:a+=(url[k+2]<<16);\n        case 2:a+=(url[k+1]<<8);\n        case 1:a+=(url[k+0]);\n    }\n    mx=mix(a,b,c);\n    if(mx[2]<0) {\n        return(0x100000000+mx[2]);\n    } else {\n        return(mx[2]);\n    }\n}\nfunction strord(string) {\n    var result=new Array();\n    for(i=0;i<string.length;i++){\n        result[i]=string[i].charCodeAt(0);\n    }\n    return(result);\n}\n//----------------------------------------------------------------------------------------------\n;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/builtin/query.js":"(function() {\n  var Query, nodeio, usage;\n  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor;\n    child.__super__ = parent.prototype;\n    return child;\n  }, __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n  usage = 'The query module can be used to select data from a URL.\\nUsage: `$ node.io query url [selector] [attribute]`\\n\\n   1. To pull front page stories from reddit:\\n       $ node.io query \"http://www.reddit.com\" a.title\\n\\n   2. To pull the href attribute from these links:\\n       $ node.io query \"http://www.reddit.com\" a.title href';\n  nodeio = require('node.io');\n  Query = (function() {\n    __extends(Query, nodeio.JobClass);\n    function Query() {\n      Query.__super__.constructor.apply(this, arguments);\n    }\n    Query.prototype.init = function() {\n      if (this.options.args.length === 0 || this.options.args[0] === 'help') {\n        this.status(usage);\n        return this.exit();\n      }\n    };\n    Query.prototype.input = false;\n    Query.prototype.run = function() {\n      if (this.options.args.length === 1) {\n        return this.get(this.options.args[0], __bind(function(err, data) {\n          if (err != null) {\n            return this.retry();\n          } else {\n            return this.emit(data);\n          }\n        }, this));\n      } else {\n        return this.getHtml(this.options.args[0], __bind(function(err, $) {\n          var elems, results;\n          if (err != null) {\n            return this.retry();\n          } else {\n            elems = $(this.options.args[1]);\n            if (elems.each != null) {\n              results = [];\n              if (this.options.args.length === 3) {\n                elems.each(this.options.args[2], function(attr) {\n                  return results.push(attr);\n                });\n              } else {\n                elems.each(function(e) {\n                  return results.push(e.text);\n                });\n              }\n            } else {\n              if (this.options.args.length === 3) {\n                results = elems.attribs[this.options.args[2]];\n              } else {\n                results = elems.text;\n              }\n            }\n            return this.emit(results);\n          }\n        }, this));\n      }\n    };\n    return Query;\n  })();\n  this[\"class\"] = Query;\n  this.job = new Query({\n    timeout: 10\n  });\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/builtin/resolve.js":"(function() {\n  var Available, HasRecord, ResolveAll, UniqueIPs, UsageDetails, dns, nodeio, options, unique_ips, usage;\n  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor;\n    child.__super__ = parent.prototype;\n    return child;\n  }, __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; }, __indexOf = Array.prototype.indexOf || function(item) {\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (this[i] === item) return i;\n    }\n    return -1;\n  };\n  usage = 'This module provides DNS resolution utilities\\n\\n   1. To resolve domains and return \"domain,ip\":\\n       $ node.io resolve < domains.txt\\n\\n   2. To return domains that do not resolve (potentially available):\\n       $ node.io resolve available < domains.txt\\n\\n   3. To return domains that do resolve:\\n       $ node.io resolve found < domains.txt\\n\\n   3. To return unique IPs:\\n       $ node.io resolve ips < domains.txt';\n  nodeio = require('node.io');\n  dns = require('dns');\n  options = {\n    max: 100,\n    timeout: 5,\n    retries: 1\n  };\n  ResolveAll = (function() {\n    __extends(ResolveAll, nodeio.JobClass);\n    function ResolveAll() {\n      ResolveAll.__super__.constructor.apply(this, arguments);\n    }\n    ResolveAll.prototype.run = function(domain) {\n      return dns.lookup(domain, 4, __bind(function(err, ip) {\n        if (err != null) {\n          return this.retry();\n        } else {\n          return this.emit(domain + ',' + ip);\n        }\n      }, this));\n    };\n    ResolveAll.prototype.fail = function(domain) {\n      return this.emit(domain + ',failed');\n    };\n    return ResolveAll;\n  })();\n  HasRecord = (function() {\n    __extends(HasRecord, nodeio.JobClass);\n    function HasRecord() {\n      HasRecord.__super__.constructor.apply(this, arguments);\n    }\n    HasRecord.prototype.run = function(domain) {\n      return dns.lookup(domain, 4, __bind(function(err, ip) {\n        if (err != null) {\n          return this.retry();\n        } else {\n          return this.emit(domain);\n        }\n      }, this));\n    };\n    HasRecord.prototype.fail = function(domain) {\n      return this.skip();\n    };\n    return HasRecord;\n  })();\n  Available = (function() {\n    __extends(Available, nodeio.JobClass);\n    function Available() {\n      Available.__super__.constructor.apply(this, arguments);\n    }\n    Available.prototype.run = function(domain) {\n      return dns.lookup(domain, 4, __bind(function(err, ip) {\n        if (err != null) {\n          return this.retry();\n        } else {\n          return this.skip();\n        }\n      }, this));\n    };\n    Available.prototype.fail = function(domain) {\n      return this.emit(domain);\n    };\n    return Available;\n  })();\n  unique_ips = [];\n  UniqueIPs = (function() {\n    __extends(UniqueIPs, nodeio.JobClass);\n    function UniqueIPs() {\n      UniqueIPs.__super__.constructor.apply(this, arguments);\n    }\n    UniqueIPs.prototype.run = function(domain) {\n      return dns.lookup(domain, 4, __bind(function(err, ip) {\n        if (err != null) {\n          return this.retry();\n        } else {\n          if (__indexOf.call(unique_ips, ip) >= 0) {\n            return this.skip();\n          } else {\n            unique_ips.push(ip);\n            return this.emit(ip);\n          }\n        }\n      }, this));\n    };\n    UniqueIPs.prototype.fail = function(domain) {\n      return this.skip();\n    };\n    return UniqueIPs;\n  })();\n  UsageDetails = (function() {\n    __extends(UsageDetails, nodeio.JobClass);\n    function UsageDetails() {\n      UsageDetails.__super__.constructor.apply(this, arguments);\n    }\n    UsageDetails.prototype.input = function() {\n      this.status(usage);\n      return this.exit();\n    };\n    return UsageDetails;\n  })();\n  this[\"class\"] = ResolveAll;\n  this.job = {\n    all: new ResolveAll(options),\n    found: new HasRecord(options),\n    available: new Available(options),\n    ips: new UniqueIPs(options),\n    help: new UsageDetails()\n  };\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/builtin/statuscode.js":"(function() {\n  var StatusCode, nodeio, usage;\n  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor;\n    child.__super__ = parent.prototype;\n    return child;\n  }, __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n  usage = 'Make a HEAD request to each URL of input and return the status code\\n\\n   1. To return the status code (url,status)\\n       $ cat urls.txt | node.io -s statuscode\\n\\n   2. To find domains that 404\\n       $ cat urls.txt | node.io -s statuscode 404\\n\\n   3. To find domains that redirect\\n       $ cat urls.txt | node.io -s statuscode 3';\n  nodeio = require('node.io');\n  StatusCode = (function() {\n    __extends(StatusCode, nodeio.JobClass);\n    function StatusCode() {\n      StatusCode.__super__.constructor.apply(this, arguments);\n    }\n    StatusCode.prototype.init = function() {\n      if (this.options.args.length && this.options.args[0] === 'help') {\n        this.status(usage);\n        return this.exit;\n      }\n    };\n    StatusCode.prototype.run = function(url) {\n      return this.head(url, __bind(function(err, data, headers, res) {\n        var status;\n        status = res != null ? res.statusCode : '-1';\n        if (err) {\n          if (err.length === 3) {\n            status = err;\n          }\n          if (err === 'redirects') {\n            status = 302;\n          }\n        }\n        if (this.options.args.length && this.options.args[0].length === 3) {\n          if (this.options.args[0] === '' + status) {\n            return this.emit(url);\n          } else {\n            return this.skip();\n          }\n        } else if (this.options.args.length && this.options.args[0].length === 1) {\n          if (this.options.args[0] === ('' + status)[0]) {\n            return this.emit(url);\n          } else {\n            return this.skip();\n          }\n        } else {\n          return this.emit(url + ',' + status);\n        }\n      }, this));\n    };\n    return StatusCode;\n  })();\n  this[\"class\"] = StatusCode;\n  this.job = new StatusCode({\n    timeout: 10,\n    redirects: 0\n  });\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/builtin/validate.js":"(function() {\n  var Validate, nodeio, usage;\n  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor;\n    child.__super__ = parent.prototype;\n    return child;\n  };\n  usage = 'This module is a simple wrapper for node-validator\\nAvailable filters are: int, url, ip, alpha, alphanumeric, email\\n\\n   1. To filter out lines that do not match a filter:\\n       $ node.io validate [FILTER] < list.txt\\n\\n   2. To filter out lines that match a filter:\\n       $ node.io validate not [FILTER] < list.txt';\n  nodeio = require('node.io');\n  Validate = (function() {\n    __extends(Validate, nodeio.JobClass);\n    function Validate() {\n      Validate.__super__.constructor.apply(this, arguments);\n    }\n    Validate.prototype.init = function() {\n      if (this.options.args.length === 0 || this.options.args[0] === 'help') {\n        this.status(usage);\n        return this.exit();\n      }\n    };\n    Validate.prototype.run = function(line) {\n      var filter, invert;\n      invert = this.options.args[0] === 'not';\n      filter = invert ? this.options.args[1] : this.options.args[0];\n      try {\n        switch (filter) {\n          case 'url':\n            this.assert(line).isUrl();\n            break;\n          case 'email':\n            this.assert(line).isEmail();\n            break;\n          case 'int':\n            this.assert(line).isInt();\n            break;\n          case 'ip':\n            this.assert(line).isIp();\n            break;\n          case 'alpha':\n            this.assert(line).isAlpha();\n            break;\n          case 'alphanumeric':\n            this.assert(line).isAlphanumeric();\n            break;\n          default:\n            this.status(usage);\n            this.exit();\n        }\n        if (invert) {\n          return this.skip();\n        } else {\n          return this.emit(line);\n        }\n      } catch (error) {\n        if (invert) {\n          return this.emit(line);\n        } else {\n          return this.skip();\n        }\n      }\n    };\n    return Validate;\n  })();\n  this.job = new Validate();\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node.io/node_modules/node.io/builtin/word_count.js":"(function() {\n  var UsageDetails, WordCount, nodeio, options, usage, word_count;\n  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {\n    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor;\n    child.__super__ = parent.prototype;\n    return child;\n  };\n  usage = 'This module uses map/reduce to count word occurrences\\n\\n    1. To count the words from a file\\n        $ node.io word_count < input.txt';\n  nodeio = require('node.io');\n  options = {\n    max: 10,\n    take: 10\n  };\n  word_count = {};\n  WordCount = (function() {\n    __extends(WordCount, nodeio.JobClass);\n    function WordCount() {\n      WordCount.__super__.constructor.apply(this, arguments);\n    }\n    WordCount.prototype.run = function(lines) {\n      var line, word, words, _i, _j, _len, _len2;\n      words = [];\n      for (_i = 0, _len = lines.length; _i < _len; _i++) {\n        line = lines[_i];\n        line = line.toLowerCase().replace(/[^a-z0-9\\s]+/g, '').split(' ');\n        for (_j = 0, _len2 = line.length; _j < _len2; _j++) {\n          word = line[_j];\n          words.push(word);\n        }\n      }\n      return this.emit(words);\n    };\n    WordCount.prototype.reduce = function(words) {\n      var word, _i, _len;\n      for (_i = 0, _len = words.length; _i < _len; _i++) {\n        word = words[_i];\n        if (word_count[word] != null) {\n          word_count[word]++;\n        } else {\n          word_count[word] = 1;\n        }\n      }\n      return null;\n    };\n    WordCount.prototype.complete = function() {\n      var count, output, word;\n      output = [];\n      for (word in word_count) {\n        count = word_count[word];\n        output.push(count + ' ' + word);\n      }\n      this.output(output);\n      return true;\n    };\n    return WordCount;\n  })();\n  UsageDetails = (function() {\n    __extends(UsageDetails, nodeio.JobClass);\n    function UsageDetails() {\n      UsageDetails.__super__.constructor.apply(this, arguments);\n    }\n    UsageDetails.prototype.input = function() {\n      this.status(usage);\n      return this.exit();\n    };\n    return UsageDetails;\n  })();\n  this.job = {\n    count: new WordCount(options),\n    help: new UsageDetails()\n  };\n}).call(this);\n"}